//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace J2N.Resources {
    using System;
    using System.Reflection;


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
#if FEATURE_TYPEEXTENSIONS_GETTYPEINFO
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("J2N.Resources.Strings", typeof(Strings).GetTypeInfo().Assembly);
#else
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("J2N.Resources.Strings", typeof(Strings).Assembly);
#endif
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array lengths must be the same..
        /// </summary>
        internal static string Arg_ArrayLengthsDiffer {
            get {
                return ResourceManager.GetString("Arg_ArrayLengthsDiffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Destination array is not long enough to copy all the items in the collection. Check array index and length..
        /// </summary>
        internal static string Arg_ArrayPlusOffTooSmall {
            get {
                return ResourceManager.GetString("Arg_ArrayPlusOffTooSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only supported array types for CopyTo on BitArrays are Boolean[], Int32[] and Byte[]..
        /// </summary>
        internal static string Arg_BitArrayTypeUnsupported {
            get {
                return ResourceManager.GetString("Arg_BitArrayTypeUnsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HashSet capacity is too big..
        /// </summary>
        internal static string Arg_HSCapacityOverflow {
            get {
                return ResourceManager.GetString("Arg_HSCapacityOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hashtable&apos;s capacity overflowed and went negative. Check load factor, capacity and the current size of the table..
        /// </summary>
        internal static string Arg_HTCapacityOverflow {
            get {
                return ResourceManager.GetString("Arg_HTCapacityOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient space in the target location to copy the information..
        /// </summary>
        internal static string Arg_InsufficientSpace {
            get {
                return ResourceManager.GetString("Arg_InsufficientSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given key &apos;{0}&apos; was not present in the dictionary..
        /// </summary>
        internal static string Arg_KeyNotFoundWithKey {
            get {
                return ResourceManager.GetString("Arg_KeyNotFoundWithKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The lower bound of target array must be zero..
        /// </summary>
        internal static string Arg_NonZeroLowerBound {
            get {
                return ResourceManager.GetString("Arg_NonZeroLowerBound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only single dimensional arrays are supported for the requested action..
        /// </summary>
        internal static string Arg_RankMultiDimNotSupported {
            get {
                return ResourceManager.GetString("Arg_RankMultiDimNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{0}&apos; is not of type &apos;{1}&apos; and cannot be used in this generic collection..
        /// </summary>
        internal static string Arg_WrongType {
            get {
                return ResourceManager.GetString("Arg_WrongType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An item with the same key has already been added. Key: {0}.
        /// </summary>
        internal static string Argument_AddingDuplicate {
            get {
                return ResourceManager.GetString("Argument_AddingDuplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input array length must not exceed Int32.MaxValue / {0}. Otherwise BitArray.Length would exceed Int32.MaxValue..
        /// </summary>
        internal static string Argument_ArrayTooLarge {
            get {
                return ResourceManager.GetString("Argument_ArrayTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to collection must not be the same instance as this..
        /// </summary>
        internal static string Argument_CollectionMustNotBeThis {
            get {
                return ResourceManager.GetString("Argument_CollectionMustNotBeThis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target array type is not compatible with the type of items in the collection..
        /// </summary>
        internal static string Argument_InvalidArrayType {
            get {
                return ResourceManager.GetString("Argument_InvalidArrayType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection..
        /// </summary>
        internal static string Argument_InvalidOffLen {
            get {
                return ResourceManager.GetString("Argument_InvalidOffLen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key was of an incorrect type for this dictionary..
        /// </summary>
        internal static string Argument_TypeOfKeyIncorrect {
            get {
                return ResourceManager.GetString("Argument_TypeOfKeyIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value was of an incorrect type for this dictionary..
        /// </summary>
        internal static string Argument_TypeOfValueIncorrect {
            get {
                return ResourceManager.GetString("Argument_TypeOfValueIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection does not support null values..
        /// </summary>
        internal static string ArgumentNull_CollectionDoesntSupportNull {
            get {
                return ResourceManager.GetString("ArgumentNull_CollectionDoesntSupportNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be less than or equal to the size of the collection..
        /// </summary>
        internal static string ArgumentOutOfRange_BiggerThanCollection {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_BiggerThanCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index was out of range. Must be non-negative and less than the size of the collection..
        /// </summary>
        internal static string ArgumentOutOfRange_Index {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_Index", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to capacity must be at least 1..
        /// </summary>
        internal static string ArgumentOutOfRange_NeedCapacityAtLeast1 {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_NeedCapacityAtLeast1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to limit must be at least 1..
        /// </summary>
        internal static string ArgumentOutOfRange_NeedLimitAtLeast1 {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_NeedLimitAtLeast1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-negative number required..
        /// </summary>
        internal static string ArgumentOutOfRange_NeedNonNegNum {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_NeedNonNegNum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to capacity was less than the current size..
        /// </summary>
        internal static string ArgumentOutOfRange_SmallCapacity {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_SmallCapacity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SyncRoot property may not be used for the synchronization of concurrent collections..
        /// </summary>
        internal static string ConcurrentCollection_SyncRoot_NotSupported {
            get {
                return ResourceManager.GetString("ConcurrentCollection_SyncRoot_NotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LinkedList node does not belong to current LinkedList..
        /// </summary>
        internal static string ExternalLinkedListNode {
            get {
                return ResourceManager.GetString("ExternalLinkedListNode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operations that change non-concurrent collections must have exclusive access. A concurrent update was performed on this collection and corrupted its state. The collection&apos;s state is no longer correct..
        /// </summary>
        internal static string InvalidOperation_CollectionCorrupted {
            get {
                return ResourceManager.GetString("InvalidOperation_CollectionCorrupted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Either an IComparer&lt;T&gt; must be supplied via a constructor, or the generic closing type must implement IComparable&lt;T&gt;..
        /// </summary>
        internal static string InvalidOperation_ComparerRequired {
            get {
                return ResourceManager.GetString("InvalidOperation_ComparerRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operations that change non-concurrent collections must have exclusive access. A concurrent update was performed on this collection and corrupted its state. The collection&apos;s state is no longer correct..
        /// </summary>
        internal static string InvalidOperation_ConcurrentOperationsNotSupported {
            get {
                return ResourceManager.GetString("InvalidOperation_ConcurrentOperationsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Queue empty..
        /// </summary>
        internal static string InvalidOperation_EmptyQueue {
            get {
                return ResourceManager.GetString("InvalidOperation_EmptyQueue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stack empty..
        /// </summary>
        internal static string InvalidOperation_EmptyStack {
            get {
                return ResourceManager.GetString("InvalidOperation_EmptyStack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enumeration already finished..
        /// </summary>
        internal static string InvalidOperation_EnumEnded {
            get {
                return ResourceManager.GetString("InvalidOperation_EnumEnded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection was modified after the enumerator was instantiated..
        /// </summary>
        internal static string InvalidOperation_EnumFailedVersion {
            get {
                return ResourceManager.GetString("InvalidOperation_EnumFailedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enumeration has not started. Call MoveNext..
        /// </summary>
        internal static string InvalidOperation_EnumNotStarted {
            get {
                return ResourceManager.GetString("InvalidOperation_EnumNotStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enumeration has either not started or has already finished..
        /// </summary>
        internal static string InvalidOperation_EnumOpCantHappen {
            get {
                return ResourceManager.GetString("InvalidOperation_EnumOpCantHappen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LinkedList is empty..
        /// </summary>
        internal static string LinkedListEmpty {
            get {
                return ResourceManager.GetString("LinkedListEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LinkedList node already belongs to a LinkedList..
        /// </summary>
        internal static string LinkedListNodeIsAttached {
            get {
                return ResourceManager.GetString("LinkedListNodeIsAttached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LurchTable internal datastructure appears to be corrupted..
        /// </summary>
        internal static string LurchTable_CorruptedData {
            get {
                return ResourceManager.GetString("LurchTable_CorruptedData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For an unordered LurchTable (LurchTableOrder.None), the limit must be set to int.MaxValue..
        /// </summary>
        internal static string LurchTable_NeedLimitIntMaxValue {
            get {
                return ResourceManager.GetString("LurchTable_NeedLimitIntMaxValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mutating a key collection derived from a dictionary is not allowed..
        /// </summary>
        internal static string NotSupported_KeyCollectionSet {
            get {
                return ResourceManager.GetString("NotSupported_KeyCollectionSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection is read-only..
        /// </summary>
        internal static string NotSupported_ReadOnlyCollection {
            get {
                return ResourceManager.GetString("NotSupported_ReadOnlyCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not supported on SortedList nested types because they require modifying the original SortedList..
        /// </summary>
        internal static string NotSupported_SortedListNestedWrite {
            get {
                return ResourceManager.GetString("NotSupported_SortedListNestedWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mutating a value collection derived from a dictionary is not allowed..
        /// </summary>
        internal static string NotSupported_ValueCollectionSet {
            get {
                return ResourceManager.GetString("NotSupported_ValueCollectionSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OnDeserialization method was called while the object was not being deserialized..
        /// </summary>
        internal static string Serialization_InvalidOnDeser {
            get {
                return ResourceManager.GetString("Serialization_InvalidOnDeser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The serialized Count information doesn&apos;t match the number of items..
        /// </summary>
        internal static string Serialization_MismatchedCount {
            get {
                return ResourceManager.GetString("Serialization_MismatchedCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The keys for this dictionary are missing..
        /// </summary>
        internal static string Serialization_MissingKeys {
            get {
                return ResourceManager.GetString("Serialization_MissingKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The values for this dictionary are missing..
        /// </summary>
        internal static string Serialization_MissingValues {
            get {
                return ResourceManager.GetString("Serialization_MissingValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be less than or equal to upperValue..
        /// </summary>
        internal static string SortedSet_LowerValueGreaterThanUpperValue {
            get {
                return ResourceManager.GetString("SortedSet_LowerValueGreaterThanUpperValue", resourceCulture);
            }
        }
    }
}
