// Copyright 2018 Ulf Adams
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Globalization;
using System.Numerics;
using System.Runtime.CompilerServices;

namespace J2N.Numerics
{
    /// <summary>
    /// An implementation of Ryu for <see cref="double"/>.
    /// </summary>
    internal sealed partial class RyuDouble
    {
#if DEBUG
        private static bool DEBUG = false;
#endif

        private const int DOUBLE_MANTISSA_BITS = 52;
        private const long DOUBLE_MANTISSA_MASK = (1L << DOUBLE_MANTISSA_BITS) - 1;

        private const int DOUBLE_EXPONENT_BITS = 11;
        private const int DOUBLE_EXPONENT_MASK = (1 << DOUBLE_EXPONENT_BITS) - 1;
        private const int DOUBLE_EXPONENT_BIAS = (1 << (DOUBLE_EXPONENT_BITS - 1)) - 1;

        private const int POS_TABLE_SIZE = 326;
        private const int NEG_TABLE_SIZE = 291;

        #region Debug Tables
#if DEBUG
        // Only for debugging.
        private static readonly BigInteger[] POW5 = new BigInteger[POS_TABLE_SIZE] {
            BigInteger.Parse("1"),
            BigInteger.Parse("5"),
            BigInteger.Parse("25"),
            BigInteger.Parse("125"),
            BigInteger.Parse("625"),
            BigInteger.Parse("3125"),
            BigInteger.Parse("15625"),
            BigInteger.Parse("78125"),
            BigInteger.Parse("390625"),
            BigInteger.Parse("1953125"),
            BigInteger.Parse("9765625"),
            BigInteger.Parse("48828125"),
            BigInteger.Parse("244140625"),
            BigInteger.Parse("1220703125"),
            BigInteger.Parse("6103515625"),
            BigInteger.Parse("30517578125"),
            BigInteger.Parse("152587890625"),
            BigInteger.Parse("762939453125"),
            BigInteger.Parse("3814697265625"),
            BigInteger.Parse("19073486328125"),
            BigInteger.Parse("95367431640625"),
            BigInteger.Parse("476837158203125"),
            BigInteger.Parse("2384185791015625"),
            BigInteger.Parse("11920928955078125"),
            BigInteger.Parse("59604644775390625"),
            BigInteger.Parse("298023223876953125"),
            BigInteger.Parse("1490116119384765625"),
            BigInteger.Parse("7450580596923828125"),
            BigInteger.Parse("37252902984619140625"),
            BigInteger.Parse("186264514923095703125"),
            BigInteger.Parse("931322574615478515625"),
            BigInteger.Parse("4656612873077392578125"),
            BigInteger.Parse("23283064365386962890625"),
            BigInteger.Parse("116415321826934814453125"),
            BigInteger.Parse("582076609134674072265625"),
            BigInteger.Parse("2910383045673370361328125"),
            BigInteger.Parse("14551915228366851806640625"),
            BigInteger.Parse("72759576141834259033203125"),
            BigInteger.Parse("363797880709171295166015625"),
            BigInteger.Parse("1818989403545856475830078125"),
            BigInteger.Parse("9094947017729282379150390625"),
            BigInteger.Parse("45474735088646411895751953125"),
            BigInteger.Parse("227373675443232059478759765625"),
            BigInteger.Parse("1136868377216160297393798828125"),
            BigInteger.Parse("5684341886080801486968994140625"),
            BigInteger.Parse("28421709430404007434844970703125"),
            BigInteger.Parse("142108547152020037174224853515625"),
            BigInteger.Parse("710542735760100185871124267578125"),
            BigInteger.Parse("3552713678800500929355621337890625"),
            BigInteger.Parse("17763568394002504646778106689453125"),
            BigInteger.Parse("88817841970012523233890533447265625"),
            BigInteger.Parse("444089209850062616169452667236328125"),
            BigInteger.Parse("2220446049250313080847263336181640625"),
            BigInteger.Parse("11102230246251565404236316680908203125"),
            BigInteger.Parse("55511151231257827021181583404541015625"),
            BigInteger.Parse("277555756156289135105907917022705078125"),
            BigInteger.Parse("1387778780781445675529539585113525390625"),
            BigInteger.Parse("6938893903907228377647697925567626953125"),
            BigInteger.Parse("34694469519536141888238489627838134765625"),
            BigInteger.Parse("173472347597680709441192448139190673828125"),
            BigInteger.Parse("867361737988403547205962240695953369140625"),
            BigInteger.Parse("4336808689942017736029811203479766845703125"),
            BigInteger.Parse("21684043449710088680149056017398834228515625"),
            BigInteger.Parse("108420217248550443400745280086994171142578125"),
            BigInteger.Parse("542101086242752217003726400434970855712890625"),
            BigInteger.Parse("2710505431213761085018632002174854278564453125"),
            BigInteger.Parse("13552527156068805425093160010874271392822265625"),
            BigInteger.Parse("67762635780344027125465800054371356964111328125"),
            BigInteger.Parse("338813178901720135627329000271856784820556640625"),
            BigInteger.Parse("1694065894508600678136645001359283924102783203125"),
            BigInteger.Parse("8470329472543003390683225006796419620513916015625"),
            BigInteger.Parse("42351647362715016953416125033982098102569580078125"),
            BigInteger.Parse("211758236813575084767080625169910490512847900390625"),
            BigInteger.Parse("1058791184067875423835403125849552452564239501953125"),
            BigInteger.Parse("5293955920339377119177015629247762262821197509765625"),
            BigInteger.Parse("26469779601696885595885078146238811314105987548828125"),
            BigInteger.Parse("132348898008484427979425390731194056570529937744140625"),
            BigInteger.Parse("661744490042422139897126953655970282852649688720703125"),
            BigInteger.Parse("3308722450212110699485634768279851414263248443603515625"),
            BigInteger.Parse("16543612251060553497428173841399257071316242218017578125"),
            BigInteger.Parse("82718061255302767487140869206996285356581211090087890625"),
            BigInteger.Parse("413590306276513837435704346034981426782906055450439453125"),
            BigInteger.Parse("2067951531382569187178521730174907133914530277252197265625"),
            BigInteger.Parse("10339757656912845935892608650874535669572651386260986328125"),
            BigInteger.Parse("51698788284564229679463043254372678347863256931304931640625"),
            BigInteger.Parse("258493941422821148397315216271863391739316284656524658203125"),
            BigInteger.Parse("1292469707114105741986576081359316958696581423282623291015625"),
            BigInteger.Parse("6462348535570528709932880406796584793482907116413116455078125"),
            BigInteger.Parse("32311742677852643549664402033982923967414535582065582275390625"),
            BigInteger.Parse("161558713389263217748322010169914619837072677910327911376953125"),
            BigInteger.Parse("807793566946316088741610050849573099185363389551639556884765625"),
            BigInteger.Parse("4038967834731580443708050254247865495926816947758197784423828125"),
            BigInteger.Parse("20194839173657902218540251271239327479634084738790988922119140625"),
            BigInteger.Parse("100974195868289511092701256356196637398170423693954944610595703125"),
            BigInteger.Parse("504870979341447555463506281780983186990852118469774723052978515625"),
            BigInteger.Parse("2524354896707237777317531408904915934954260592348873615264892578125"),
            BigInteger.Parse("12621774483536188886587657044524579674771302961744368076324462890625"),
            BigInteger.Parse("63108872417680944432938285222622898373856514808721840381622314453125"),
            BigInteger.Parse("315544362088404722164691426113114491869282574043609201908111572265625"),
            BigInteger.Parse("1577721810442023610823457130565572459346412870218046009540557861328125"),
            BigInteger.Parse("7888609052210118054117285652827862296732064351090230047702789306640625"),
            BigInteger.Parse("39443045261050590270586428264139311483660321755451150238513946533203125"),
            BigInteger.Parse("197215226305252951352932141320696557418301608777255751192569732666015625"),
            BigInteger.Parse("986076131526264756764660706603482787091508043886278755962848663330078125"),
            BigInteger.Parse("4930380657631323783823303533017413935457540219431393779814243316650390625"),
            BigInteger.Parse("24651903288156618919116517665087069677287701097156968899071216583251953125"),
            BigInteger.Parse("123259516440783094595582588325435348386438505485784844495356082916259765625"),
            BigInteger.Parse("616297582203915472977912941627176741932192527428924222476780414581298828125"),
            BigInteger.Parse("3081487911019577364889564708135883709660962637144621112383902072906494140625"),
            BigInteger.Parse("15407439555097886824447823540679418548304813185723105561919510364532470703125"),
            BigInteger.Parse("77037197775489434122239117703397092741524065928615527809597551822662353515625"),
            BigInteger.Parse("385185988877447170611195588516985463707620329643077639047987759113311767578125"),
            BigInteger.Parse("1925929944387235853055977942584927318538101648215388195239938795566558837890625"),
            BigInteger.Parse("9629649721936179265279889712924636592690508241076940976199693977832794189453125"),
            BigInteger.Parse("48148248609680896326399448564623182963452541205384704880998469889163970947265625"),
            BigInteger.Parse("240741243048404481631997242823115914817262706026923524404992349445819854736328125"),
            BigInteger.Parse("1203706215242022408159986214115579574086313530134617622024961747229099273681640625"),
            BigInteger.Parse("6018531076210112040799931070577897870431567650673088110124808736145496368408203125"),
            BigInteger.Parse("30092655381050560203999655352889489352157838253365440550624043680727481842041015625"),
            BigInteger.Parse("150463276905252801019998276764447446760789191266827202753120218403637409210205078125"),
            BigInteger.Parse("752316384526264005099991383822237233803945956334136013765601092018187046051025390625"),
            BigInteger.Parse("3761581922631320025499956919111186169019729781670680068828005460090935230255126953125"),
            BigInteger.Parse("18807909613156600127499784595555930845098648908353400344140027300454676151275634765625"),
            BigInteger.Parse("94039548065783000637498922977779654225493244541767001720700136502273380756378173828125"),
            BigInteger.Parse("470197740328915003187494614888898271127466222708835008603500682511366903781890869140625"),
            BigInteger.Parse("2350988701644575015937473074444491355637331113544175043017503412556834518909454345703125"),
            BigInteger.Parse("11754943508222875079687365372222456778186655567720875215087517062784172594547271728515625"),
            BigInteger.Parse("58774717541114375398436826861112283890933277838604376075437585313920862972736358642578125"),
            BigInteger.Parse("293873587705571876992184134305561419454666389193021880377187926569604314863681793212890625"),
            BigInteger.Parse("1469367938527859384960920671527807097273331945965109401885939632848021574318408966064453125"),
            BigInteger.Parse("7346839692639296924804603357639035486366659729825547009429698164240107871592044830322265625"),
            BigInteger.Parse("36734198463196484624023016788195177431833298649127735047148490821200539357960224151611328125"),
            BigInteger.Parse("183670992315982423120115083940975887159166493245638675235742454106002696789801120758056640625"),
            BigInteger.Parse("918354961579912115600575419704879435795832466228193376178712270530013483949005603790283203125"),
            BigInteger.Parse("4591774807899560578002877098524397178979162331140966880893561352650067419745028018951416015625"),
            BigInteger.Parse("22958874039497802890014385492621985894895811655704834404467806763250337098725140094757080078125"),
            BigInteger.Parse("114794370197489014450071927463109929474479058278524172022339033816251685493625700473785400390625"),
            BigInteger.Parse("573971850987445072250359637315549647372395291392620860111695169081258427468128502368927001953125"),
            BigInteger.Parse("2869859254937225361251798186577748236861976456963104300558475845406292137340642511844635009765625"),
            BigInteger.Parse("14349296274686126806258990932888741184309882284815521502792379227031460686703212559223175048828125"),
            BigInteger.Parse("71746481373430634031294954664443705921549411424077607513961896135157303433516062796115875244140625"),
            BigInteger.Parse("358732406867153170156474773322218529607747057120388037569809480675786517167580313980579376220703125"),
            BigInteger.Parse("1793662034335765850782373866611092648038735285601940187849047403378932585837901569902896881103515625"),
            BigInteger.Parse("8968310171678829253911869333055463240193676428009700939245237016894662929189507849514484405517578125"),
            BigInteger.Parse("44841550858394146269559346665277316200968382140048504696226185084473314645947539247572422027587890625"),
            BigInteger.Parse("224207754291970731347796733326386581004841910700242523481130925422366573229737696237862110137939453125"),
            BigInteger.Parse("1121038771459853656738983666631932905024209553501212617405654627111832866148688481189310550689697265625"),
            BigInteger.Parse("5605193857299268283694918333159664525121047767506063087028273135559164330743442405946552753448486328125"),
            BigInteger.Parse("28025969286496341418474591665798322625605238837530315435141365677795821653717212029732763767242431640625"),
            BigInteger.Parse("140129846432481707092372958328991613128026194187651577175706828388979108268586060148663818836212158203125"),
            BigInteger.Parse("700649232162408535461864791644958065640130970938257885878534141944895541342930300743319094181060791015625"),
            BigInteger.Parse("3503246160812042677309323958224790328200654854691289429392670709724477706714651503716595470905303955078125"),
            BigInteger.Parse("17516230804060213386546619791123951641003274273456447146963353548622388533573257518582977354526519775390625"),
            BigInteger.Parse("87581154020301066932733098955619758205016371367282235734816767743111942667866287592914886772632598876953125"),
            BigInteger.Parse("437905770101505334663665494778098791025081856836411178674083838715559713339331437964574433863162994384765625"),
            BigInteger.Parse("2189528850507526673318327473890493955125409284182055893370419193577798566696657189822872169315814971923828125"),
            BigInteger.Parse("10947644252537633366591637369452469775627046420910279466852095967888992833483285949114360846579074859619140625"),
            BigInteger.Parse("54738221262688166832958186847262348878135232104551397334260479839444964167416429745571804232895374298095703125"),
            BigInteger.Parse("273691106313440834164790934236311744390676160522756986671302399197224820837082148727859021164476871490478515625"),
            BigInteger.Parse("1368455531567204170823954671181558721953380802613784933356511995986124104185410743639295105822384357452392578125"),
            BigInteger.Parse("6842277657836020854119773355907793609766904013068924666782559979930620520927053718196475529111921787261962890625"),
            BigInteger.Parse("34211388289180104270598866779538968048834520065344623333912799899653102604635268590982377645559608936309814453125"),
            BigInteger.Parse("171056941445900521352994333897694840244172600326723116669563999498265513023176342954911888227798044681549072265625"),
            BigInteger.Parse("855284707229502606764971669488474201220863001633615583347819997491327565115881714774559441138990223407745361328125"),
            BigInteger.Parse("4276423536147513033824858347442371006104315008168077916739099987456637825579408573872797205694951117038726806640625"),
            BigInteger.Parse("21382117680737565169124291737211855030521575040840389583695499937283189127897042869363986028474755585193634033203125"),
            BigInteger.Parse("106910588403687825845621458686059275152607875204201947918477499686415945639485214346819930142373777925968170166015625"),
            BigInteger.Parse("534552942018439129228107293430296375763039376021009739592387498432079728197426071734099650711868889629840850830078125"),
            BigInteger.Parse("2672764710092195646140536467151481878815196880105048697961937492160398640987130358670498253559344448149204254150390625"),
            BigInteger.Parse("13363823550460978230702682335757409394075984400525243489809687460801993204935651793352491267796722240746021270751953125"),
            BigInteger.Parse("66819117752304891153513411678787046970379922002626217449048437304009966024678258966762456338983611203730106353759765625"),
            BigInteger.Parse("334095588761524455767567058393935234851899610013131087245242186520049830123391294833812281694918056018650531768798828125"),
            BigInteger.Parse("1670477943807622278837835291969676174259498050065655436226210932600249150616956474169061408474590280093252658843994140625"),
            BigInteger.Parse("8352389719038111394189176459848380871297490250328277181131054663001245753084782370845307042372951400466263294219970703125"),
            BigInteger.Parse("41761948595190556970945882299241904356487451251641385905655273315006228765423911854226535211864757002331316471099853515625"),
            BigInteger.Parse("208809742975952784854729411496209521782437256258206929528276366575031143827119559271132676059323785011656582355499267578125"),
            BigInteger.Parse("1044048714879763924273647057481047608912186281291034647641381832875155719135597796355663380296618925058282911777496337890625"),
            BigInteger.Parse("5220243574398819621368235287405238044560931406455173238206909164375778595677988981778316901483094625291414558887481689453125"),
            BigInteger.Parse("26101217871994098106841176437026190222804657032275866191034545821878892978389944908891584507415473126457072794437408447265625"),
            BigInteger.Parse("130506089359970490534205882185130951114023285161379330955172729109394464891949724544457922537077365632285363972187042236328125"),
            BigInteger.Parse("652530446799852452671029410925654755570116425806896654775863645546972324459748622722289612685386828161426819860935211181640625"),
            BigInteger.Parse("3262652233999262263355147054628273777850582129034483273879318227734861622298743113611448063426934140807134099304676055908203125"),
            BigInteger.Parse("16313261169996311316775735273141368889252910645172416369396591138674308111493715568057240317134670704035670496523380279541015625"),
            BigInteger.Parse("81566305849981556583878676365706844446264553225862081846982955693371540557468577840286201585673353520178352482616901397705078125"),
            BigInteger.Parse("407831529249907782919393381828534222231322766129310409234914778466857702787342889201431007928366767600891762413084506988525390625"),
            BigInteger.Parse("2039157646249538914596966909142671111156613830646552046174573892334288513936714446007155039641833838004458812065422534942626953125"),
            BigInteger.Parse("10195788231247694572984834545713355555783069153232760230872869461671442569683572230035775198209169190022294060327112674713134765625"),
            BigInteger.Parse("50978941156238472864924172728566777778915345766163801154364347308357212848417861150178875991045845950111470301635563373565673828125"),
            BigInteger.Parse("254894705781192364324620863642833888894576728830819005771821736541786064242089305750894379955229229750557351508177816867828369140625"),
            BigInteger.Parse("1274473528905961821623104318214169444472883644154095028859108682708930321210446528754471899776146148752786757540889084339141845703125"),
            BigInteger.Parse("6372367644529809108115521591070847222364418220770475144295543413544651606052232643772359498880730743763933787704445421695709228515625"),
            BigInteger.Parse("31861838222649045540577607955354236111822091103852375721477717067723258030261163218861797494403653718819668938522227108478546142578125"),
            BigInteger.Parse("159309191113245227702888039776771180559110455519261878607388585338616290151305816094308987472018268594098344692611135542392730712890625"),
            BigInteger.Parse("796545955566226138514440198883855902795552277596309393036942926693081450756529080471544937360091342970491723463055677711963653564453125"),
            BigInteger.Parse("3982729777831130692572200994419279513977761387981546965184714633465407253782645402357724686800456714852458617315278388559818267822265625"),
            BigInteger.Parse("19913648889155653462861004972096397569888806939907734825923573167327036268913227011788623434002283574262293086576391942799091339111328125"),
            BigInteger.Parse("99568244445778267314305024860481987849444034699538674129617865836635181344566135058943117170011417871311465432881959713995456695556640625"),
            BigInteger.Parse("497841222228891336571525124302409939247220173497693370648089329183175906722830675294715585850057089356557327164409798569977283477783203125"),
            BigInteger.Parse("2489206111144456682857625621512049696236100867488466853240446645915879533614153376473577929250285446782786635822048992849886417388916015625"),
            BigInteger.Parse("12446030555722283414288128107560248481180504337442334266202233229579397668070766882367889646251427233913933179110244964249432086944580078125"),
            BigInteger.Parse("62230152778611417071440640537801242405902521687211671331011166147896988340353834411839448231257136169569665895551224821247160434722900390625"),
            BigInteger.Parse("311150763893057085357203202689006212029512608436058356655055830739484941701769172059197241156285680847848329477756124106235802173614501953125"),
            BigInteger.Parse("1555753819465285426786016013445031060147563042180291783275279153697424708508845860295986205781428404239241647388780620531179010868072509765625"),
            BigInteger.Parse("7778769097326427133930080067225155300737815210901458916376395768487123542544229301479931028907142021196208236943903102655895054340362548828125"),
            BigInteger.Parse("38893845486632135669650400336125776503689076054507294581881978842435617712721146507399655144535710105981041184719515513279475271701812744140625"),
            BigInteger.Parse("194469227433160678348252001680628882518445380272536472909409894212178088563605732536998275722678550529905205923597577566397376358509063720703125"),
            BigInteger.Parse("972346137165803391741260008403144412592226901362682364547049471060890442818028662684991378613392752649526029617987887831986881792545318603515625"),
            BigInteger.Parse("4861730685829016958706300042015722062961134506813411822735247355304452214090143313424956893066963763247630148089939439159934408962726593017578125"),
            BigInteger.Parse("24308653429145084793531500210078610314805672534067059113676236776522261070450716567124784465334818816238150740449697195799672044813632965087890625"),
            BigInteger.Parse("121543267145725423967657501050393051574028362670335295568381183882611305352253582835623922326674094081190753702248485978998360224068164825439453125"),
            BigInteger.Parse("607716335728627119838287505251965257870141813351676477841905919413056526761267914178119611633370470405953768511242429894991801120340824127197265625"),
            BigInteger.Parse("3038581678643135599191437526259826289350709066758382389209529597065282633806339570890598058166852352029768842556212149474959005601704120635986328125"),
            BigInteger.Parse("15192908393215677995957187631299131446753545333791911946047647985326413169031697854452990290834261760148844212781060747374795028008520603179931640625"),
            BigInteger.Parse("75964541966078389979785938156495657233767726668959559730238239926632065845158489272264951454171308800744221063905303736873975140042603015899658203125"),
            BigInteger.Parse("379822709830391949898929690782478286168838633344797798651191199633160329225792446361324757270856544003721105319526518684369875700213015079498291015625"),
            BigInteger.Parse("1899113549151959749494648453912391430844193166723988993255955998165801646128962231806623786354282720018605526597632593421849378501065075397491455078125"),
            BigInteger.Parse("9495567745759798747473242269561957154220965833619944966279779990829008230644811159033118931771413600093027632988162967109246892505325376987457275390625"),
            BigInteger.Parse("47477838728798993737366211347809785771104829168099724831398899954145041153224055795165594658857068000465138164940814835546234462526626884937286376953125"),
            BigInteger.Parse("237389193643994968686831056739048928855524145840498624156994499770725205766120278975827973294285340002325690824704074177731172312633134424686431884765625"),
            BigInteger.Parse("1186945968219974843434155283695244644277620729202493120784972498853626028830601394879139866471426700011628454123520370888655861563165672123432159423828125"),
            BigInteger.Parse("5934729841099874217170776418476223221388103646012465603924862494268130144153006974395699332357133500058142270617601854443279307815828360617160797119140625"),
            BigInteger.Parse("29673649205499371085853882092381116106940518230062328019624312471340650720765034871978496661785667500290711353088009272216396539079141803085803985595703125"),
            BigInteger.Parse("148368246027496855429269410461905580534702591150311640098121562356703253603825174359892483308928337501453556765440046361081982695395709015429019927978515625"),
            BigInteger.Parse("741841230137484277146347052309527902673512955751558200490607811783516268019125871799462416544641687507267783827200231805409913476978545077145099639892578125"),
            BigInteger.Parse("3709206150687421385731735261547639513367564778757791002453039058917581340095629358997312082723208437536338919136001159027049567384892725385725498199462890625"),
            BigInteger.Parse("18546030753437106928658676307738197566837823893788955012265195294587906700478146794986560413616042187681694595680005795135247836924463626928627490997314453125"),
            BigInteger.Parse("92730153767185534643293381538690987834189119468944775061325976472939533502390733974932802068080210938408472978400028975676239184622318134643137454986572265625"),
            BigInteger.Parse("463650768835927673216466907693454939170945597344723875306629882364697667511953669874664010340401054692042364892000144878381195923111590673215687274932861328125"),
            BigInteger.Parse("2318253844179638366082334538467274695854727986723619376533149411823488337559768349373320051702005273460211824460000724391905979615557953366078436374664306640625"),
            BigInteger.Parse("11591269220898191830411672692336373479273639933618096882665747059117441687798841746866600258510026367301059122300003621959529898077789766830392181873321533203125"),
            BigInteger.Parse("57956346104490959152058363461681867396368199668090484413328735295587208438994208734333001292550131836505295611500018109797649490388948834151960909366607666015625"),
            BigInteger.Parse("289781730522454795760291817308409336981840998340452422066643676477936042194971043671665006462750659182526478057500090548988247451944744170759804546833038330078125"),
            BigInteger.Parse("1448908652612273978801459086542046684909204991702262110333218382389680210974855218358325032313753295912632390287500452744941237259723720853799022734165191650390625"),
            BigInteger.Parse("7244543263061369894007295432710233424546024958511310551666091911948401054874276091791625161568766479563161951437502263724706186298618604268995113670825958251953125"),
            BigInteger.Parse("36222716315306849470036477163551167122730124792556552758330459559742005274371380458958125807843832397815809757187511318623530931493093021344975568354129791259765625"),
            BigInteger.Parse("181113581576534247350182385817755835613650623962782763791652297798710026371856902294790629039219161989079048785937556593117654657465465106724877841770648956298828125"),
            BigInteger.Parse("905567907882671236750911929088779178068253119813913818958261488993550131859284511473953145196095809945395243929687782965588273287327325533624389208853244781494140625"),
            BigInteger.Parse("4527839539413356183754559645443895890341265599069569094791307444967750659296422557369765725980479049726976219648438914827941366436636627668121946044266223907470703125"),
            BigInteger.Parse("22639197697066780918772798227219479451706327995347845473956537224838753296482112786848828629902395248634881098242194574139706832183183138340609730221331119537353515625"),
            BigInteger.Parse("113195988485333904593863991136097397258531639976739227369782686124193766482410563934244143149511976243174405491210972870698534160915915691703048651106655597686767578125"),
            BigInteger.Parse("565979942426669522969319955680486986292658199883696136848913430620968832412052819671220715747559881215872027456054864353492670804579578458515243255533277988433837890625"),
            BigInteger.Parse("2829899712133347614846599778402434931463290999418480684244567153104844162060264098356103578737799406079360137280274321767463354022897892292576216277666389942169189453125"),
            BigInteger.Parse("14149498560666738074232998892012174657316454997092403421222835765524220810301320491780517893688997030396800686401371608837316770114489461462881081388331949710845947265625"),
            BigInteger.Parse("70747492803333690371164994460060873286582274985462017106114178827621104051506602458902589468444985151984003432006858044186583850572447307314405406941659748554229736328125"),
            BigInteger.Parse("353737464016668451855824972300304366432911374927310085530570894138105520257533012294512947342224925759920017160034290220932919252862236536572027034708298742771148681640625"),
            BigInteger.Parse("1768687320083342259279124861501521832164556874636550427652854470690527601287665061472564736711124628799600085800171451104664596264311182682860135173541493713855743408203125"),
            BigInteger.Parse("8843436600416711296395624307507609160822784373182752138264272353452638006438325307362823683555623143998000429000857255523322981321555913414300675867707468569278717041015625"),
            BigInteger.Parse("44217183002083556481978121537538045804113921865913760691321361767263190032191626536814118417778115719990002145004286277616614906607779567071503379338537342846393585205078125"),
            BigInteger.Parse("221085915010417782409890607687690229020569609329568803456606808836315950160958132684070592088890578599950010725021431388083074533038897835357516896692686714231967926025390625"),
            BigInteger.Parse("1105429575052088912049453038438451145102848046647844017283034044181579750804790663420352960444452892999750053625107156940415372665194489176787584483463433571159839630126953125"),
            BigInteger.Parse("5527147875260444560247265192192255725514240233239220086415170220907898754023953317101764802222264464998750268125535784702076863325972445883937922417317167855799198150634765625"),
            BigInteger.Parse("27635739376302222801236325960961278627571201166196100432075851104539493770119766585508824011111322324993751340627678923510384316629862229419689612086585839278995990753173828125"),
            BigInteger.Parse("138178696881511114006181629804806393137856005830980502160379255522697468850598832927544120055556611624968756703138394617551921583149311147098448060432929196394979953765869140625"),
            BigInteger.Parse("690893484407555570030908149024031965689280029154902510801896277613487344252994164637720600277783058124843783515691973087759607915746555735492240302164645981974899768829345703125"),
            BigInteger.Parse("3454467422037777850154540745120159828446400145774512554009481388067436721264970823188603001388915290624218917578459865438798039578732778677461201510823229909874498844146728515625"),
            BigInteger.Parse("17272337110188889250772703725600799142232000728872562770047406940337183606324854115943015006944576453121094587892299327193990197893663893387306007554116149549372494220733642578125"),
            BigInteger.Parse("86361685550944446253863518628003995711160003644362813850237034701685918031624270579715075034722882265605472939461496635969950989468319466936530037770580747746862471103668212890625"),
            BigInteger.Parse("431808427754722231269317593140019978555800018221814069251185173508429590158121352898575375173614411328027364697307483179849754947341597334682650188852903738734312355518341064453125"),
            BigInteger.Parse("2159042138773611156346587965700099892779000091109070346255925867542147950790606764492876875868072056640136823486537415899248774736707986673413250944264518693671561777591705322265625"),
            BigInteger.Parse("10795210693868055781732939828500499463895000455545351731279629337710739753953033822464384379340360283200684117432687079496243873683539933367066254721322593468357808887958526611328125"),
            BigInteger.Parse("53976053469340278908664699142502497319475002277726758656398146688553698769765169112321921896701801416003420587163435397481219368417699666835331273606612967341789044439792633056640625"),
            BigInteger.Parse("269880267346701394543323495712512486597375011388633793281990733442768493848825845561609609483509007080017102935817176987406096842088498334176656368033064836708945222198963165283203125"),
            BigInteger.Parse("1349401336733506972716617478562562432986875056943168966409953667213842469244129227808048047417545035400085514679085884937030484210442491670883281840165324183544726110994815826416015625"),
            BigInteger.Parse("6747006683667534863583087392812812164934375284715844832049768336069212346220646139040240237087725177000427573395429424685152421052212458354416409200826620917723630554974079132080078125"),
            BigInteger.Parse("33735033418337674317915436964064060824671876423579224160248841680346061731103230695201201185438625885002137866977147123425762105261062291772082046004133104588618152774870395660400390625"),
            BigInteger.Parse("168675167091688371589577184820320304123359382117896120801244208401730308655516153476006005927193129425010689334885735617128810526305311458860410230020665522943090763874351978302001953125"),
            BigInteger.Parse("843375835458441857947885924101601520616796910589480604006221042008651543277580767380030029635965647125053446674428678085644052631526557294302051150103327614715453819371759891510009765625"),
            BigInteger.Parse("4216879177292209289739429620508007603083984552947403020031105210043257716387903836900150148179828235625267233372143390428220263157632786471510255750516638073577269096858799457550048828125"),
            BigInteger.Parse("21084395886461046448697148102540038015419922764737015100155526050216288581939519184500750740899141178126336166860716952141101315788163932357551278752583190367886345484293997287750244140625"),
            BigInteger.Parse("105421979432305232243485740512700190077099613823685075500777630251081442909697595922503753704495705890631680834303584760705506578940819661787756393762915951839431727421469986438751220703125"),
            BigInteger.Parse("527109897161526161217428702563500950385498069118425377503888151255407214548487979612518768522478529453158404171517923803527532894704098308938781968814579759197158637107349932193756103515625"),
            BigInteger.Parse("2635549485807630806087143512817504751927490345592126887519440756277036072742439898062593842612392647265792020857589619017637664473520491544693909844072898795985793185536749660968780517578125"),
            BigInteger.Parse("13177747429038154030435717564087523759637451727960634437597203781385180363712199490312969213061963236328960104287948095088188322367602457723469549220364493979928965927683748304843902587890625"),
            BigInteger.Parse("65888737145190770152178587820437618798187258639803172187986018906925901818560997451564846065309816181644800521439740475440941611838012288617347746101822469899644829638418741524219512939453125"),
            BigInteger.Parse("329443685725953850760892939102188093990936293199015860939930094534629509092804987257824230326549080908224002607198702377204708059190061443086738730509112349498224148192093707621097564697265625"),
            BigInteger.Parse("1647218428629769253804464695510940469954681465995079304699650472673147545464024936289121151632745404541120013035993511886023540295950307215433693652545561747491120740960468538105487823486328125"),
            BigInteger.Parse("8236092143148846269022323477554702349773407329975396523498252363365737727320124681445605758163727022705600065179967559430117701479751536077168468262727808737455603704802342690527439117431640625"),
            BigInteger.Parse("41180460715744231345111617387773511748867036649876982617491261816828688636600623407228028790818635113528000325899837797150588507398757680385842341313639043687278018524011713452637195587158203125"),
            BigInteger.Parse("205902303578721156725558086938867558744335183249384913087456309084143443183003117036140143954093175567640001629499188985752942536993788401929211706568195218436390092620058567263185977935791015625"),
            BigInteger.Parse("1029511517893605783627790434694337793721675916246924565437281545420717215915015585180700719770465877838200008147495944928764712684968942009646058532840976092181950463100292836315929889678955078125"),
            BigInteger.Parse("5147557589468028918138952173471688968608379581234622827186407727103586079575077925903503598852329389191000040737479724643823563424844710048230292664204880460909752315501464181579649448394775390625"),
            BigInteger.Parse("25737787947340144590694760867358444843041897906173114135932038635517930397875389629517517994261646945955000203687398623219117817124223550241151463321024402304548761577507320907898247241973876953125"),
            BigInteger.Parse("128688939736700722953473804336792224215209489530865570679660193177589651989376948147587589971308234729775001018436993116095589085621117751205757316605122011522743807887536604539491236209869384765625"),
            BigInteger.Parse("643444698683503614767369021683961121076047447654327853398300965887948259946884740737937949856541173648875005092184965580477945428105588756028786583025610057613719039437683022697456181049346923828125"),
            BigInteger.Parse("3217223493417518073836845108419805605380237238271639266991504829439741299734423703689689749282705868244375025460924827902389727140527943780143932915128050288068595197188415113487280905246734619140625"),
            BigInteger.Parse("16086117467087590369184225542099028026901186191358196334957524147198706498672118518448448746413529341221875127304624139511948635702639718900719664575640251440342975985942075567436404526233673095703125"),
            BigInteger.Parse("80430587335437951845921127710495140134505930956790981674787620735993532493360592592242243732067646706109375636523120697559743178513198594503598322878201257201714879929710377837182022631168365478515625"),
            BigInteger.Parse("402152936677189759229605638552475700672529654783954908373938103679967662466802962961211218660338233530546878182615603487798715892565992972517991614391006286008574399648551889185910113155841827392578125"),
            BigInteger.Parse("2010764683385948796148028192762378503362648273919774541869690518399838312334014814806056093301691167652734390913078017438993579462829964862589958071955031430042871998242759445929550565779209136962890625"),
            BigInteger.Parse("10053823416929743980740140963811892516813241369598872709348452591999191561670074074030280466508455838263671954565390087194967897314149824312949790359775157150214359991213797229647752828896045684814453125"),
            BigInteger.Parse("50269117084648719903700704819059462584066206847994363546742262959995957808350370370151402332542279191318359772826950435974839486570749121564748951798875785751071799956068986148238764144480228424072265625"),
            BigInteger.Parse("251345585423243599518503524095297312920331034239971817733711314799979789041751851850757011662711395956591798864134752179874197432853745607823744758994378928755358999780344930741193820722401142120361328125"),
            BigInteger.Parse("1256727927116217997592517620476486564601655171199859088668556573999898945208759259253785058313556979782958994320673760899370987164268728039118723794971894643776794998901724653705969103612005710601806640625"),
            BigInteger.Parse("6283639635581089987962588102382432823008275855999295443342782869999494726043796296268925291567784898914794971603368804496854935821343640195593618974859473218883974994508623268529845518060028553009033203125"),
            BigInteger.Parse("31418198177905449939812940511912164115041379279996477216713914349997473630218981481344626457838924494573974858016844022484274679106718200977968094874297366094419874972543116342649227590300142765045166015625"),
            BigInteger.Parse("157090990889527249699064702559560820575206896399982386083569571749987368151094907406723132289194622472869874290084220112421373395533591004889840474371486830472099374862715581713246137951500713825225830078125"),
            BigInteger.Parse("785454954447636248495323512797804102876034481999911930417847858749936840755474537033615661445973112364349371450421100562106866977667955024449202371857434152360496874313577908566230689757503569126129150390625"),
            BigInteger.Parse("3927274772238181242476617563989020514380172409999559652089239293749684203777372685168078307229865561821746857252105502810534334888339775122246011859287170761802484371567889542831153448787517845630645751953125"),
            BigInteger.Parse("19636373861190906212383087819945102571900862049997798260446196468748421018886863425840391536149327809108734286260527514052671674441698875611230059296435853809012421857839447714155767243937589228153228759765625"),
            BigInteger.Parse("98181869305954531061915439099725512859504310249988991302230982343742105094434317129201957680746639045543671431302637570263358372208494378056150296482179269045062109289197238570778836219687946140766143798828125"),
            BigInteger.Parse("490909346529772655309577195498627564297521551249944956511154911718710525472171585646009788403733195227718357156513187851316791861042471890280751482410896345225310546445986192853894181098439730703830718994140625"),
            BigInteger.Parse("2454546732648863276547885977493137821487607756249724782555774558593552627360857928230048942018665976138591785782565939256583959305212359451403757412054481726126552732229930964269470905492198653519153594970703125"),
            BigInteger.Parse("12272733663244316382739429887465689107438038781248623912778872792967763136804289641150244710093329880692958928912829696282919796526061797257018787060272408630632763661149654821347354527460993267595767974853515625"),
            BigInteger.Parse("61363668316221581913697149437328445537190193906243119563894363964838815684021448205751223550466649403464794644564148481414598982630308986285093935301362043153163818305748274106736772637304966337978839874267578125"),
            BigInteger.Parse("306818341581107909568485747186642227685950969531215597819471819824194078420107241028756117752333247017323973222820742407072994913151544931425469676506810215765819091528741370533683863186524831689894199371337890625"),
            BigInteger.Parse("1534091707905539547842428735933211138429754847656077989097359099120970392100536205143780588761666235086619866114103712035364974565757724657127348382534051078829095457643706852668419315932624158449470996856689453125"),
            BigInteger.Parse("7670458539527697739212143679666055692148774238280389945486795495604851960502681025718902943808331175433099330570518560176824872828788623285636741912670255394145477288218534263342096579663120792247354984283447265625"),
            BigInteger.Parse("38352292697638488696060718398330278460743871191401949727433977478024259802513405128594514719041655877165496652852592800884124364143943116428183709563351276970727386441092671316710482898315603961236774921417236328125"),
            BigInteger.Parse("191761463488192443480303591991651392303719355957009748637169887390121299012567025642972573595208279385827483264262964004420621820719715582140918547816756384853636932205463356583552414491578019806183874607086181640625"),
            BigInteger.Parse("958807317440962217401517959958256961518596779785048743185849436950606495062835128214862867976041396929137416321314820022103109103598577910704592739083781924268184661027316782917762072457890099030919373035430908203125"),
            BigInteger.Parse("4794036587204811087007589799791284807592983898925243715929247184753032475314175641074314339880206984645687081606574100110515545517992889553522963695418909621340923305136583914588810362289450495154596865177154541015625"),
            BigInteger.Parse("23970182936024055435037948998956424037964919494626218579646235923765162376570878205371571699401034923228435408032870500552577727589964447767614818477094548106704616525682919572944051811447252475772984325885772705078125"),
            BigInteger.Parse("119850914680120277175189744994782120189824597473131092898231179618825811882854391026857858497005174616142177040164352502762888637949822238838074092385472740533523082628414597864720259057236262378864921629428863525390625"),
            BigInteger.Parse("599254573400601385875948724973910600949122987365655464491155898094129059414271955134289292485025873080710885200821762513814443189749111194190370461927363702667615413142072989323601295286181311894324608147144317626953125"),
            BigInteger.Parse("2996272867003006929379743624869553004745614936828277322455779490470645297071359775671446462425129365403554426004108812569072215948745555970951852309636818513338077065710364946618006476430906559471623040735721588134765625"),
            BigInteger.Parse("14981364335015034646898718124347765023728074684141386612278897452353226485356798878357232312125646827017772130020544062845361079743727779854759261548184092566690385328551824733090032382154532797358115203678607940673828125"),
            BigInteger.Parse("74906821675075173234493590621738825118640373420706933061394487261766132426783994391786161560628234135088860650102720314226805398718638899273796307740920462833451926642759123665450161910772663986790576018393039703369140625"),
            BigInteger.Parse("374534108375375866172467953108694125593201867103534665306972436308830662133919971958930807803141170675444303250513601571134026993593194496368981538704602314167259633213795618327250809553863319933952880091965198516845703125"),
            BigInteger.Parse("1872670541876879330862339765543470627966009335517673326534862181544153310669599859794654039015705853377221516252568007855670134967965972481844907693523011570836298166068978091636254047769316599669764400459825992584228515625"),
            BigInteger.Parse("9363352709384396654311698827717353139830046677588366632674310907720766553347999298973270195078529266886107581262840039278350674839829862409224538467615057854181490830344890458181270238846582998348822002299129962921142578125"),
            BigInteger.Parse("46816763546921983271558494138586765699150233387941833163371554538603832766739996494866350975392646334430537906314200196391753374199149312046122692338075289270907454151724452290906351194232914991744110011495649814605712890625"),
            BigInteger.Parse("234083817734609916357792470692933828495751166939709165816857772693019163833699982474331754876963231672152689531571000981958766870995746560230613461690376446354537270758622261454531755971164574958720550057478249073028564453125"),
            BigInteger.Parse("1170419088673049581788962353464669142478755834698545829084288863465095819168499912371658774384816158360763447657855004909793834354978732801153067308451882231772686353793111307272658779855822874793602750287391245365142822265625"),
            BigInteger.Parse("5852095443365247908944811767323345712393779173492729145421444317325479095842499561858293871924080791803817238289275024548969171774893664005765336542259411158863431768965556536363293899279114373968013751436956226825714111328125"),
            BigInteger.Parse("29260477216826239544724058836616728561968895867463645727107221586627395479212497809291469359620403959019086191446375122744845858874468320028826682711297055794317158844827782681816469496395571869840068757184781134128570556640625"),
            BigInteger.Parse("146302386084131197723620294183083642809844479337318228635536107933136977396062489046457346798102019795095430957231875613724229294372341600144133413556485278971585794224138913409082347481977859349200343785923905670642852783203125"),
        };

        private static readonly BigInteger[] POW5_INV = new BigInteger[NEG_TABLE_SIZE] {
            BigInteger.Parse("5316911983139663491615228241121378305"), BigInteger.Parse("4253529586511730793292182592897102644"),
            BigInteger.Parse("3402823669209384634633746074317682115"), BigInteger.Parse("2722258935367507707706996859454145692"),
            BigInteger.Parse("4355614296588012332331194975126633107"), BigInteger.Parse("3484491437270409865864955980101306486"),
            BigInteger.Parse("2787593149816327892691964784081045189"), BigInteger.Parse("4460149039706124628307143654529672302"),
            BigInteger.Parse("3568119231764899702645714923623737841"), BigInteger.Parse("2854495385411919762116571938898990273"),
            BigInteger.Parse("4567192616659071619386515102238384437"), BigInteger.Parse("3653754093327257295509212081790707550"),
            BigInteger.Parse("2923003274661805836407369665432566040"), BigInteger.Parse("4676805239458889338251791464692105663"),
            BigInteger.Parse("3741444191567111470601433171753684531"), BigInteger.Parse("2993155353253689176481146537402947625"),
            BigInteger.Parse("4789048565205902682369834459844716199"), BigInteger.Parse("3831238852164722145895867567875772960"),
            BigInteger.Parse("3064991081731777716716694054300618368"), BigInteger.Parse("4903985730770844346746710486880989388"),
            BigInteger.Parse("3923188584616675477397368389504791511"), BigInteger.Parse("3138550867693340381917894711603833209"),
            BigInteger.Parse("5021681388309344611068631538566133133"), BigInteger.Parse("4017345110647475688854905230852906507"),
            BigInteger.Parse("3213876088517980551083924184682325206"), BigInteger.Parse("5142201741628768881734278695491720329"),
            BigInteger.Parse("4113761393303015105387422956393376263"), BigInteger.Parse("3291009114642412084309938365114701010"),
            BigInteger.Parse("5265614583427859334895901384183521616"), BigInteger.Parse("4212491666742287467916721107346817293"),
            BigInteger.Parse("3369993333393829974333376885877453835"), BigInteger.Parse("2695994666715063979466701508701963068"),
            BigInteger.Parse("4313591466744102367146722413923140908"), BigInteger.Parse("3450873173395281893717377931138512727"),
            BigInteger.Parse("2760698538716225514973902344910810181"), BigInteger.Parse("4417117661945960823958243751857296290"),
            BigInteger.Parse("3533694129556768659166595001485837032"), BigInteger.Parse("2826955303645414927333276001188669626"),
            BigInteger.Parse("4523128485832663883733241601901871401"), BigInteger.Parse("3618502788666131106986593281521497121"),
            BigInteger.Parse("2894802230932904885589274625217197697"), BigInteger.Parse("4631683569492647816942839400347516315"),
            BigInteger.Parse("3705346855594118253554271520278013052"), BigInteger.Parse("2964277484475294602843417216222410442"),
            BigInteger.Parse("4742843975160471364549467545955856706"), BigInteger.Parse("3794275180128377091639574036764685365"),
            BigInteger.Parse("3035420144102701673311659229411748292"), BigInteger.Parse("4856672230564322677298654767058797267"),
            BigInteger.Parse("3885337784451458141838923813647037814"), BigInteger.Parse("3108270227561166513471139050917630251"),
            BigInteger.Parse("4973232364097866421553822481468208402"), BigInteger.Parse("3978585891278293137243057985174566721"),
            BigInteger.Parse("3182868713022634509794446388139653377"), BigInteger.Parse("5092589940836215215671114221023445403"),
            BigInteger.Parse("4074071952668972172536891376818756323"), BigInteger.Parse("3259257562135177738029513101455005058"),
            BigInteger.Parse("5214812099416284380847220962328008093"), BigInteger.Parse("4171849679533027504677776769862406474"),
            BigInteger.Parse("3337479743626422003742221415889925180"), BigInteger.Parse("2669983794901137602993777132711940144"),
            BigInteger.Parse("4271974071841820164790043412339104230"), BigInteger.Parse("3417579257473456131832034729871283384"),
            BigInteger.Parse("2734063405978764905465627783897026707"), BigInteger.Parse("4374501449566023848745004454235242731"),
            BigInteger.Parse("3499601159652819078996003563388194185"), BigInteger.Parse("2799680927722255263196802850710555348"),
            BigInteger.Parse("4479489484355608421114884561136888557"), BigInteger.Parse("3583591587484486736891907648909510845"),
            BigInteger.Parse("2866873269987589389513526119127608676"), BigInteger.Parse("4586997231980143023221641790604173882"),
            BigInteger.Parse("3669597785584114418577313432483339106"), BigInteger.Parse("2935678228467291534861850745986671285"),
            BigInteger.Parse("4697085165547666455778961193578674055"), BigInteger.Parse("3757668132438133164623168954862939244"),
            BigInteger.Parse("3006134505950506531698535163890351396"), BigInteger.Parse("4809815209520810450717656262224562233"),
            BigInteger.Parse("3847852167616648360574125009779649786"), BigInteger.Parse("3078281734093318688459300007823719829"),
            BigInteger.Parse("4925250774549309901534880012517951726"), BigInteger.Parse("3940200619639447921227904010014361381"),
            BigInteger.Parse("3152160495711558336982323208011489105"), BigInteger.Parse("5043456793138493339171717132818382568"),
            BigInteger.Parse("4034765434510794671337373706254706054"), BigInteger.Parse("3227812347608635737069898965003764843"),
            BigInteger.Parse("5164499756173817179311838344006023749"), BigInteger.Parse("4131599804939053743449470675204818999"),
            BigInteger.Parse("3305279843951242994759576540163855200"), BigInteger.Parse("5288447750321988791615322464262168319"),
            BigInteger.Parse("4230758200257591033292257971409734655"), BigInteger.Parse("3384606560206072826633806377127787724"),
            BigInteger.Parse("2707685248164858261307045101702230180"), BigInteger.Parse("4332296397063773218091272162723568287"),
            BigInteger.Parse("3465837117651018574473017730178854630"), BigInteger.Parse("2772669694120814859578414184143083704"),
            BigInteger.Parse("4436271510593303775325462694628933926"), BigInteger.Parse("3549017208474643020260370155703147141"),
            BigInteger.Parse("2839213766779714416208296124562517713"), BigInteger.Parse("4542742026847543065933273799300028340"),
            BigInteger.Parse("3634193621478034452746619039440022672"), BigInteger.Parse("2907354897182427562197295231552018138"),
            BigInteger.Parse("4651767835491884099515672370483229020"), BigInteger.Parse("3721414268393507279612537896386583216"),
            BigInteger.Parse("2977131414714805823690030317109266573"), BigInteger.Parse("4763410263543689317904048507374826517"),
            BigInteger.Parse("3810728210834951454323238805899861214"), BigInteger.Parse("3048582568667961163458591044719888971"),
            BigInteger.Parse("4877732109868737861533745671551822353"), BigInteger.Parse("3902185687894990289226996537241457883"),
            BigInteger.Parse("3121748550315992231381597229793166306"), BigInteger.Parse("4994797680505587570210555567669066090"),
            BigInteger.Parse("3995838144404470056168444454135252872"), BigInteger.Parse("3196670515523576044934755563308202298"),
            BigInteger.Parse("5114672824837721671895608901293123676"), BigInteger.Parse("4091738259870177337516487121034498941"),
            BigInteger.Parse("3273390607896141870013189696827599153"), BigInteger.Parse("5237424972633826992021103514924158644"),
            BigInteger.Parse("4189939978107061593616882811939326915"), BigInteger.Parse("3351951982485649274893506249551461532"),
            BigInteger.Parse("2681561585988519419914804999641169226"), BigInteger.Parse("4290498537581631071863687999425870761"),
            BigInteger.Parse("3432398830065304857490950399540696609"), BigInteger.Parse("2745919064052243885992760319632557287"),
            BigInteger.Parse("4393470502483590217588416511412091660"), BigInteger.Parse("3514776401986872174070733209129673328"),
            BigInteger.Parse("2811821121589497739256586567303738662"), BigInteger.Parse("4498913794543196382810538507685981859"),
            BigInteger.Parse("3599131035634557106248430806148785488"), BigInteger.Parse("2879304828507645684998744644919028390"),
            BigInteger.Parse("4606887725612233095997991431870445424"), BigInteger.Parse("3685510180489786476798393145496356339"),
            BigInteger.Parse("2948408144391829181438714516397085072"), BigInteger.Parse("4717453031026926690301943226235336114"),
            BigInteger.Parse("3773962424821541352241554580988268891"), BigInteger.Parse("3019169939857233081793243664790615113"),
            BigInteger.Parse("4830671903771572930869189863664984181"), BigInteger.Parse("3864537523017258344695351890931987345"),
            BigInteger.Parse("3091630018413806675756281512745589876"), BigInteger.Parse("4946608029462090681210050420392943801"),
            BigInteger.Parse("3957286423569672544968040336314355041"), BigInteger.Parse("3165829138855738035974432269051484033"),
            BigInteger.Parse("5065326622169180857559091630482374452"), BigInteger.Parse("4052261297735344686047273304385899562"),
            BigInteger.Parse("3241809038188275748837818643508719650"), BigInteger.Parse("5186894461101241198140509829613951439"),
            BigInteger.Parse("4149515568880992958512407863691161152"), BigInteger.Parse("3319612455104794366809926290952928921"),
            BigInteger.Parse("5311379928167670986895882065524686274"), BigInteger.Parse("4249103942534136789516705652419749019"),
            BigInteger.Parse("3399283154027309431613364521935799215"), BigInteger.Parse("2719426523221847545290691617548639372"),
            BigInteger.Parse("4351082437154956072465106588077822996"), BigInteger.Parse("3480865949723964857972085270462258397"),
            BigInteger.Parse("2784692759779171886377668216369806717"), BigInteger.Parse("4455508415646675018204269146191690747"),
            BigInteger.Parse("3564406732517340014563415316953352598"), BigInteger.Parse("2851525386013872011650732253562682079"),
            BigInteger.Parse("4562440617622195218641171605700291325"), BigInteger.Parse("3649952494097756174912937284560233060"),
            BigInteger.Parse("2919961995278204939930349827648186448"), BigInteger.Parse("4671939192445127903888559724237098317"),
            BigInteger.Parse("3737551353956102323110847779389678654"), BigInteger.Parse("2990041083164881858488678223511742923"),
            BigInteger.Parse("4784065733063810973581885157618788677"), BigInteger.Parse("3827252586451048778865508126095030942"),
            BigInteger.Parse("3061802069160839023092406500876024753"), BigInteger.Parse("4898883310657342436947850401401639605"),
            BigInteger.Parse("3919106648525873949558280321121311684"), BigInteger.Parse("3135285318820699159646624256897049347"),
            BigInteger.Parse("5016456510113118655434598811035278956"), BigInteger.Parse("4013165208090494924347679048828223165"),
            BigInteger.Parse("3210532166472395939478143239062578532"), BigInteger.Parse("5136851466355833503165029182500125650"),
            BigInteger.Parse("4109481173084666802532023346000100520"), BigInteger.Parse("3287584938467733442025618676800080416"),
            BigInteger.Parse("5260135901548373507240989882880128666"), BigInteger.Parse("4208108721238698805792791906304102933"),
            BigInteger.Parse("3366486976990959044634233525043282346"), BigInteger.Parse("2693189581592767235707386820034625877"),
            BigInteger.Parse("4309103330548427577131818912055401403"), BigInteger.Parse("3447282664438742061705455129644321123"),
            BigInteger.Parse("2757826131550993649364364103715456898"), BigInteger.Parse("4412521810481589838982982565944731037"),
            BigInteger.Parse("3530017448385271871186386052755784830"), BigInteger.Parse("2824013958708217496949108842204627864"),
            BigInteger.Parse("4518422333933147995118574147527404582"), BigInteger.Parse("3614737867146518396094859318021923666"),
            BigInteger.Parse("2891790293717214716875887454417538933"), BigInteger.Parse("4626864469947543547001419927068062292"),
            BigInteger.Parse("3701491575958034837601135941654449834"), BigInteger.Parse("2961193260766427870080908753323559867"),
            BigInteger.Parse("4737909217226284592129454005317695787"), BigInteger.Parse("3790327373781027673703563204254156630"),
            BigInteger.Parse("3032261899024822138962850563403325304"), BigInteger.Parse("4851619038439715422340560901445320486"),
            BigInteger.Parse("3881295230751772337872448721156256389"), BigInteger.Parse("3105036184601417870297958976925005111"),
            BigInteger.Parse("4968057895362268592476734363080008177"), BigInteger.Parse("3974446316289814873981387490464006542"),
            BigInteger.Parse("3179557053031851899185109992371205234"), BigInteger.Parse("5087291284850963038696175987793928374"),
            BigInteger.Parse("4069833027880770430956940790235142699"), BigInteger.Parse("3255866422304616344765552632188114159"),
            BigInteger.Parse("5209386275687386151624884211500982655"), BigInteger.Parse("4167509020549908921299907369200786124"),
            BigInteger.Parse("3334007216439927137039925895360628899"), BigInteger.Parse("2667205773151941709631940716288503119"),
            BigInteger.Parse("4267529237043106735411105146061604991"), BigInteger.Parse("3414023389634485388328884116849283993"),
            BigInteger.Parse("2731218711707588310663107293479427194"), BigInteger.Parse("4369949938732141297060971669567083510"),
            BigInteger.Parse("3495959950985713037648777335653666808"), BigInteger.Parse("2796767960788570430119021868522933447"),
            BigInteger.Parse("4474828737261712688190434989636693515"), BigInteger.Parse("3579862989809370150552347991709354812"),
            BigInteger.Parse("2863890391847496120441878393367483850"), BigInteger.Parse("4582224626955993792707005429387974159"),
            BigInteger.Parse("3665779701564795034165604343510379327"), BigInteger.Parse("2932623761251836027332483474808303462"),
            BigInteger.Parse("4692198018002937643731973559693285539"), BigInteger.Parse("3753758414402350114985578847754628431"),
            BigInteger.Parse("3003006731521880091988463078203702745"), BigInteger.Parse("4804810770435008147181540925125924392"),
            BigInteger.Parse("3843848616348006517745232740100739513"), BigInteger.Parse("3075078893078405214196186192080591611"),
            BigInteger.Parse("4920126228925448342713897907328946577"), BigInteger.Parse("3936100983140358674171118325863157262"),
            BigInteger.Parse("3148880786512286939336894660690525810"), BigInteger.Parse("5038209258419659102939031457104841295"),
            BigInteger.Parse("4030567406735727282351225165683873036"), BigInteger.Parse("3224453925388581825880980132547098429"),
            BigInteger.Parse("5159126280621730921409568212075357486"), BigInteger.Parse("4127301024497384737127654569660285989"),
            BigInteger.Parse("3301840819597907789702123655728228791"), BigInteger.Parse("5282945311356652463523397849165166066"),
            BigInteger.Parse("4226356249085321970818718279332132853"), BigInteger.Parse("3381084999268257576654974623465706282"),
            BigInteger.Parse("2704867999414606061323979698772565026"), BigInteger.Parse("4327788799063369698118367518036104041"),
            BigInteger.Parse("3462231039250695758494694014428883233"), BigInteger.Parse("2769784831400556606795755211543106586"),
            BigInteger.Parse("4431655730240890570873208338468970538"), BigInteger.Parse("3545324584192712456698566670775176431"),
            BigInteger.Parse("2836259667354169965358853336620141145"), BigInteger.Parse("4538015467766671944574165338592225831"),
            BigInteger.Parse("3630412374213337555659332270873780665"), BigInteger.Parse("2904329899370670044527465816699024532"),
            BigInteger.Parse("4646927838993072071243945306718439251"), BigInteger.Parse("3717542271194457656995156245374751401"),
            BigInteger.Parse("2974033816955566125596124996299801121"), BigInteger.Parse("4758454107128905800953799994079681793"),
            BigInteger.Parse("3806763285703124640763039995263745434"), BigInteger.Parse("3045410628562499712610431996210996348"),
            BigInteger.Parse("4872657005699999540176691193937594156"), BigInteger.Parse("3898125604559999632141352955150075325"),
            BigInteger.Parse("3118500483647999705713082364120060260"), BigInteger.Parse("4989600773836799529140931782592096416"),
            BigInteger.Parse("3991680619069439623312745426073677133"), BigInteger.Parse("3193344495255551698650196340858941706"),
            BigInteger.Parse("5109351192408882717840314145374306730"), BigInteger.Parse("4087480953927106174272251316299445384"),
            BigInteger.Parse("3269984763141684939417801053039556307"), BigInteger.Parse("5231975621026695903068481684863290091"),
            BigInteger.Parse("4185580496821356722454785347890632073"), BigInteger.Parse("3348464397457085377963828278312505659"),
            BigInteger.Parse("2678771517965668302371062622650004527"), BigInteger.Parse("4286034428745069283793700196240007243"),
            BigInteger.Parse("3428827542996055427034960156992005794"), BigInteger.Parse("2743062034396844341627968125593604636"),
            BigInteger.Parse("4388899255034950946604749000949767417"), BigInteger.Parse("3511119404027960757283799200759813933"),
            BigInteger.Parse("2808895523222368605827039360607851147"), BigInteger.Parse("4494232837155789769323262976972561835"),
            BigInteger.Parse("3595386269724631815458610381578049468"), BigInteger.Parse("2876309015779705452366888305262439574"),
            BigInteger.Parse("4602094425247528723787021288419903319"), BigInteger.Parse("3681675540198022979029617030735922655"),
            BigInteger.Parse("2945340432158418383223693624588738124"), BigInteger.Parse("4712544691453469413157909799341980998"),
            BigInteger.Parse("3770035753162775530526327839473584799"), BigInteger.Parse("3016028602530220424421062271578867839"),
            BigInteger.Parse("4825645764048352679073699634526188542"), BigInteger.Parse("3860516611238682143258959707620950834"),
            BigInteger.Parse("3088413288990945714607167766096760667"), BigInteger.Parse("4941461262385513143371468425754817067"),
            BigInteger.Parse("3953169009908410514697174740603853654"), BigInteger.Parse("3162535207926728411757739792483082923"),
            BigInteger.Parse("5060056332682765458812383667972932677"), BigInteger.Parse("4048045066146212367049906934378346141"),
            BigInteger.Parse("3238436052916969893639925547502676913"), BigInteger.Parse("5181497684667151829823880876004283061"),
            BigInteger.Parse("4145198147733721463859104700803426449"),
        };

#endif
        #endregion

        #region Production Tables

        private static readonly int POW5_BITCOUNT = 121; // max 3*31 = 124
        private static readonly int[][] POW5_SPLIT = new int[POS_TABLE_SIZE][] {
            new int[] { 134217728,          0,          0,          0, }, new int[] { 167772160,          0,          0,          0, },
            new int[] { 209715200,          0,          0,          0, }, new int[] { 262144000,          0,          0,          0, },
            new int[] { 163840000,          0,          0,          0, }, new int[] { 204800000,          0,          0,          0, },
            new int[] { 256000000,          0,          0,          0, }, new int[] { 160000000,          0,          0,          0, },
            new int[] { 200000000,          0,          0,          0, }, new int[] { 250000000,          0,          0,          0, },
            new int[] { 156250000,          0,          0,          0, }, new int[] { 195312500,          0,          0,          0, },
            new int[] { 244140625,          0,          0,          0, }, new int[] { 152587890, 1342177280,          0,          0, },
            new int[] { 190734863,  603979776,          0,          0, }, new int[] { 238418579,  218103808,          0,          0, },
            new int[] { 149011611, 2015363072,          0,          0, }, new int[] { 186264514, 1982332928,          0,          0, },
            new int[] { 232830643, 1404174336,          0,          0, }, new int[] { 145519152,  609173504,          0,          0, },
            new int[] { 181898940,  761466880,          0,          0, }, new int[] { 227373675,  951833600,          0,          0, },
            new int[] { 142108547,  326460544,          0,          0, }, new int[] { 177635683, 2018688416,          0,          0, },
            new int[] { 222044604, 1986489608,          0,          0, }, new int[] { 138777878,  167814181,          0,          0, },
            new int[] { 173472347, 1283509550,  536870912,          0, }, new int[] { 216840434, 1067516025, 1744830464,          0, },
            new int[] { 135525271, 1204068428,  285212672,          0, }, new int[] { 169406589,  968214623,  356515840,          0, },
            new int[] { 211758236, 1747139190, 2056257536,          0, }, new int[] { 264697796,   36440340, 1496580096,          0, },
            new int[] { 165436122, 1096517036, 2009104384,          0, }, new int[] { 206795153,  296904472,  363896832,          0, },
            new int[] { 258493941,  908001502,  454871040,          0, }, new int[] { 161558713,  835936394, 1894907136,          0, },
            new int[] { 201948391, 1581791405, 1294892096,          0, }, new int[] { 252435489, 1440368345,    8002384,          0, },
            new int[] { 157772181,   94923847, 1347178770,          0, }, new int[] { 197215226,  655525721, 1147102550, 1073741824, },
            new int[] { 246519032, 1893148975, 1970749100,  268435456, }, new int[] { 154074395, 1183218109, 2037024555, 1241513984, },
            new int[] { 192592994,  942151725,  935667958, 1015021568, }, new int[] { 240741243,  103947832, 1706455860,  195035136, },
            new int[] { 150463276, 1944015587, 1066534912, 1195638784, }, new int[] { 188079096,  282535836,  796297728, 1494548480, },
            new int[] { 235098870,  353169795,  995372160, 1868185600, }, new int[] { 146936793, 1831343858,  353672144, 1167616000, },
            new int[] { 183670992,  678567086, 1515832004, 1459520000, }, new int[] { 229588740,  848208858,  821048181, 1824400000, },
            new int[] { 143492962, 1603872360, 1050026025, 1408685456, }, new int[] { 179366203,  931098626, 1312532532,  150244084, },
            new int[] { 224207754,  627002371,  566923841,  187805105, }, new int[] { 140129846,  928747394,   85891944, 1459555470, },
            new int[] { 175162308,   87192418, 1181106754, 1824444338, }, new int[] { 218952885,  108990523,  402641619, 1206813598, },
            new int[] { 136845553,  336554532, 2130699204,  485823043, }, new int[] { 171056941,  957564078,  515890357,  607278804, },
            new int[] { 213821176, 1733826009, 1718604770, 1295969417, }, new int[] { 267276471,   19798864,  537643227,  546219947, },
            new int[] { 167047794,  817680658,  336027017,   72952011, }, new int[] { 208809742, 2095842646, 1493775595,  628060925, },
            new int[] { 261012178, 1546061484,  793477670,  248205245, }, new int[] { 163132611, 1503159339, 1569665367, 1765741014, },
            new int[] { 203915764, 1342078262, 1425210797, 1670305355, }, new int[] { 254894705, 1677597828,  707771673,  477268958, },
            new int[] { 159309191,  243192274, 1516099119, 1640470379, }, new int[] { 199136488, 1914603079,  821382075, 1513717062, },
            new int[] { 248920611,  245770201,  489856682, 1355275415, }, new int[] { 155575381, 2032654567, 1648337706, 1383918046, },
            new int[] { 194469227,  930205473, 1523551221,  656155734, }, new int[] { 243086534,  625885930,  293826290, 1357065580, },
            new int[] { 151929083, 2001791442,  720512343, 1385036899, }, new int[] { 189911354, 1965368390, 1974382253, 1194425212, },
            new int[] { 237389193, 1382968664, 1394235992, 2029902427, }, new int[] { 148368246,   59049047,  871397495, 1268689017, },
            new int[] { 185460307, 1147553133,  552375957, 1048990359, }, new int[] { 231825384,  897570504, 1227340858, 1848108861, },
            new int[] { 144890865,  560981565,  767088036, 1691938950, }, new int[] { 181113581, 1238097868, 1495730957, 2114923688, },
            new int[] { 226391976, 2084493247, 1869663697, 1033041874, }, new int[] { 141494985, 1302808279, 1973846178, 1987828451, },
            new int[] { 176868732,   17897613, 1930436811, 1411043740, }, new int[] { 221085915,   22372017,  802433278, 1226933763, },
            new int[] { 138178696, 1893030702, 1843698079,  229962689, }, new int[] { 172723371,  218804730, 1230880774, 1898066098, },
            new int[] { 215904213, 1884118649,  464859144, 1298840799, }, new int[] { 134940133, 1446009611, 1632714245,  811775499, },
            new int[] { 168675167,  196899278, 1504021894, 1551590286, }, new int[] { 210843958, 1856736834,  806285544,  865746033, },
            new int[] { 263554948, 1247179218, 2081598754, 1082182542, }, new int[] { 164721842, 1853228835, 1837870133, 1213235000, },
            new int[] { 205902303, 1242794220, 1760466754, 2053414663, }, new int[] { 257377879, 1016621864,   53099795, 1493026504, },
            new int[] { 160861174, 1440695033,   33187372,  664706109, }, new int[] { 201076468,  727126967,  578355127,  830882636, },
            new int[] { 251345585,  908908709,  186072997,  501732384, }, new int[] { 157090990, 1910245223,  384731079,  582018196, },
            new int[] { 196363738, 1314064704, 2091526585,  190651833, }, new int[] { 245454673,  568839057,  466924583,  775185703, },
            new int[] { 153409170, 1697701690, 1634005144, 1289797432, }, new int[] { 191761463, 1048385289,  968764606, 1612246790, },
            new int[] { 239701829,  773610699, 1747826670,  941566664, }, new int[] { 149813643,  751942143,  823956213,   51608253, },
            new int[] { 187267054,  403056767,  493074354,  601381228, }, new int[] { 234083817, 1577562783,   79472030, 1825468359, },
            new int[] { 146302386,  180670371,  854976387,  604046812, }, new int[] { 182877982, 1299579788,  531849572,  218187604, },
            new int[] { 228597478,  550732911,  664811965,  272734505, }, new int[] { 142873423, 1954820805, 1220813846,  438894521, },
            new int[] { 178591779, 1906655094, 2062888219, 1622359976, }, new int[] { 223239724, 1846447956, 1504868450, 1491079058, },
            new int[] { 139524828,   80288148, 2014284605, 1468795323, }, new int[] { 174406035,  100360186,  370372109,  225381418, },
            new int[] { 218007543, 1736062968, 1536706960,  818597684, }, new int[] { 136254714, 1890345723,  960441850,  511623552, },
            new int[] { 170318393, 1289190330,  663681400, 1713271265, }, new int[] { 212897992,     875176, 1903343574, 2141589081, },
            new int[] { 266122490,    1093971,  231695820, 1603244527, }, new int[] { 166326556,  537554643, 2023858079, 2075769653, },
            new int[] { 207908195,  671943304, 1992951687, 2057841155, }, new int[] { 259885244,  303058219,  343705961, 2035430532, },
            new int[] { 162428277, 1263153210, 2093864418,  466837714, }, new int[] { 203035346, 2115812425, 1543588698, 1657288967, },
            new int[] { 253794183, 1571023708,  318873137,  997869385, }, new int[] { 158621364, 1787196185, 1273037534, 1965845645, },
            new int[] { 198276706,   86511583, 2128167830, 1383565233, }, new int[] { 247845882, 1181881303, 2123338876,  655714717, },
            new int[] { 154903676, 1275546726, 2132393165, 1483563522, }, new int[] { 193629595, 1594433408, 1591749633,  243841667, },
            new int[] { 242036994, 1456170848, 1989687041,  841672995, }, new int[] { 151273121, 1446977692, 1243554400, 1868222902, },
            new int[] { 189091402,  198109379, 1554443001,  187794979, }, new int[] { 236364252, 1321378548, 1406182839,  771614636, },
            new int[] { 147727657, 1899603416, 1952606098, 1287565516, }, new int[] { 184659572,  763891535,  293273975,  535715071, },
            new int[] { 230824465,  954864418, 1977205205,  132772926, }, new int[] { 144265290, 1938967541, 1772624165,  351418535, },
            new int[] { 180331613, 1349967603,  605167470,  976144081, }, new int[] { 225414517,   76846768,  219588426,  146438277, },
            new int[] { 140884073,  316464686,  137242766,  628394835, }, new int[] { 176105091,  932451769, 1245295281, 1859235368, },
            new int[] { 220131364,  628693799, 2093490014,  713431474, }, new int[] { 137582102, 1466675448, 2113737626, 2056507407, },
            new int[] { 171977628,  759602487,  494688385, 1496892435, }, new int[] { 214972035,  949503109,   81489570,  260502808, },
            new int[] { 134357522,  325003987,  319366437,  699685167, }, new int[] { 167946902, 1479996807, 2009820782, 1411477370, },
            new int[] { 209933628,  776254185, 1975405066,  690604889, }, new int[] { 262417035,  970317732,  858643596, 1936997935, },
            new int[] { 164010647,  338013126, 1610394072,  136881885, }, new int[] { 205013308, 2033129144,  939250766,  171102357, },
            new int[] { 256266636,  393927782, 1174063457, 1287619770, }, new int[] { 160166647, 1319946688,  196918748, 2146939636, },
            new int[] { 200208309, 1113062448,  246148436,  536190897, }, new int[] { 250260386, 1928198972,  307685545,  670238622, },
            new int[] { 156412741, 1741995269, 1266045289, 1761076419, }, new int[] { 195515927,  566881350, 2119427524,  590732787, },
            new int[] { 244394909,  171730776, 1575542581,  738415984, }, new int[] { 152746818,  375767191,  984714113,  729945446, },
            new int[] { 190933522, 1543450813,  694021729, 1449302720, }, new int[] { 238666903,  855571692, 1404398074,  201015664, },
            new int[] { 149166814, 1340038675, 1951490620,  662505702, }, new int[] { 186458518,  601306520, 1902492363,  828132127, },
            new int[] { 233073147, 1825374975,  230631806,  498294247, }, new int[] { 145670717,  872423903,  949451246, 1922046640, },
            new int[] { 182088396, 1627400791,  649943146, 1328816476, }, new int[] { 227610495, 2034250989,  275558021,  587278772, },
            new int[] { 142256559, 2076713236,  440659219,  635484688, }, new int[] { 177820699, 2059020633,  550824024,  257484948, },
            new int[] { 222275874, 2036904879, 1225400942,  321856185, }, new int[] { 138922421, 1809936461, 1571181956, 1811772852, },
            new int[] { 173653027,  651807841,  353364710,  117232417, }, new int[] { 217066284,  277888889,  978576799, 1220282345, },
            new int[] { 135666427, 1247422379, 1953787779, 1567982833, }, new int[] { 169583034, 1022407062, 1905363812, 1423107630, },
            new int[] { 211978793,  204267004, 1307962941, 1778884537, }, new int[] { 264973491,  792204667, 1634953677,  612992936, },
            new int[] { 165608432,  226692461,  753410592,  651556041, }, new int[] { 207010540,  283365576, 1478634152,  814445051, },
            new int[] { 258763175,  354206970, 1848292690, 1018056314, }, new int[] { 161726984, 1026685724, 1692053843, 1173156108, },
            new int[] { 202158730, 1283357155, 2115067304,  929574223, }, new int[] { 252698413,  530454620, 2106963218, 1161967779, },
            new int[] { 157936508,  599969594,  243110187, 1263100774, }, new int[] { 197420635,  749961992, 1377629558, 1042005055, },
            new int[] { 246775794,  400581578, 1722036948,  228764495, }, new int[] { 154234871,  787234398, 1613144004, 1216719633, },
            new int[] { 192793589,  447172086,  942688181, 1520899542, }, new int[] { 240991986, 1095836020,  104618403,  290511691, },
            new int[] { 150619991, 1221768424, 1139128325, 2060617999, }, new int[] { 188274989,  990339618, 1423910407,  965159763, },
            new int[] { 235343736, 1774795435,  706146185,  669578792, }, new int[] { 147089835, 1109247147,  172905909, 1760664025, },
            new int[] { 183862294,  849688021, 1826745123,  590217295, }, new int[] { 229827867, 2135851851,  672818668,  200900707, },
            new int[] { 143642417, 1066471951,  152076211, 1199304766, }, new int[] { 179553021, 1869960850, 1800708000,  962260045, },
            new int[] { 224441277,  726838327, 1177143176, 1202825056, }, new int[] { 140275798,  722709410, 1541020853,  751765660, },
            new int[] { 175344747, 1977128587,  852534242, 1476577987, }, new int[] { 219180934, 1934539822,  528796891,  771980660, },
            new int[] { 136988084,  672216476, 1941110793,  214052456, }, new int[] { 171235105,  840270596,  278904843,  804436483, },
            new int[] { 214043881, 1587209157,  348631054,  468674691, }, new int[] { 267554852,  373398710,  972659729, 1659585188, },
            new int[] { 167221782, 1307116018,   71041419,  231934375, }, new int[] { 209027228,  560153198, 1162543597, 1900530704, },
            new int[] { 261284035,  700191498,  379437673,  765050645, }, new int[] { 163302522,  169184230,  774019457, 1820333933, },
            new int[] { 204128152, 1285222111, 2041266146,  664804680, }, new int[] { 255160190, 1606527639, 2014711770, 1904747674, },
            new int[] { 159475119,  467208862, 2064501224, 1727338208, }, new int[] { 199343899,   47140166, 1506884707,   11689112, },
            new int[] { 249179873, 1669537944,  809864059, 1625224126, }, new int[] { 155737421,  238154847,  506165037,  747329623, },
            new int[] { 194671776,  834564471,   95835384, 1471032941, }, new int[] { 243339720, 1043205588, 1730406966, 1838791176, },
            new int[] { 152087325,  652003493,    7762530,  612373573, }, new int[] { 190109156, 1351875278,  546574074, 1839208790, },
            new int[] { 237636445, 1689844097, 1756959417, 1225269164, }, new int[] { 148522778, 1324588017,  292793267, 2107970507, },
            new int[] { 185653473,  581993197,  902862496, 2098092222, }, new int[] { 232066841, 1264362408, 1665449033,  475131630, },
            new int[] { 145041775, 2132403785, 1040905645, 1639134548, }, new int[] { 181302219, 2128633819, 1838002969,  438305450, },
            new int[] { 226627774, 2123921362, 1760632799, 1084752724, }, new int[] { 141642359,  790579939, 1637266411, 1483276820, },
            new int[] { 177052949,  451354012, 1509712102, 1317225114, }, new int[] { 221316186, 1101063427, 1887140128,  572789568, },
            new int[] { 138322616, 1225035554,  911027124,  357993480, }, new int[] { 172903270, 1531294443,   65042081,  447491850, },
            new int[] { 216129088,  840376229, 1691915337, 1096235725, }, new int[] { 135080680,  525235143, 1325882541, 2027324608, },
            new int[] { 168850850,  656543929, 1120482265,  923543024, }, new int[] { 211063562, 1894421735, 1937473743, 1691299692, },
            new int[] { 263829453, 1294285345, 1884971267, 1577253703, }, new int[] { 164893408, 1077363797,  372800674,  717348108, },
            new int[] { 206116760, 1346704746, 1002871754, 1970426959, }, new int[] { 257645950, 1683380933,  179847869, 1389291875, },
            new int[] { 161028719,  515242171,  380840374, 1136742878, }, new int[] { 201285899,  107181801, 2086663204,  347186773, },
            new int[] { 251607373, 1744589988,  997716269,  433983467, }, new int[] { 157254608, 1358804198, 1697314492,  539675123, },
            new int[] { 196568260, 1698505248, 1047901291,  674593903, }, new int[] { 245710325, 2123131560, 1309876614,  306371467, },
            new int[] { 153568953, 1595392681,  818672883, 1802094903, }, new int[] { 191961192,  383628115, 1560212016, 1715747717, },
            new int[] { 239951490,  479535144, 1413394108, 2144684646, }, new int[] { 149969681,  836580377,  883371318,  266686080, },
            new int[] { 187462101, 1582596383, 1641085059, 1407099424, }, new int[] { 234327627,  367632743, 1514485412, 1222003368, },
            new int[] { 146454766, 2108818656, 1751859750, 1837493929, }, new int[] { 183068458, 1562281497,   42341040, 1223125587, },
            new int[] { 228835573,  879110047,  589797212, 1528906984, }, new int[] { 143022233,  817879235, 1173929625, 2029308689, },
            new int[] { 178777791, 1559219956,  930541120,  926023125, }, new int[] { 223472239, 1412154033, 1163176400, 1157528906, },
            new int[] { 139670149, 1687902638, 2069162530,  723455566, }, new int[] { 174587687,  499265562, 1512711338, 1978061282, },
            new int[] { 218234609,   87211041,  817147349, 1398834779, }, new int[] { 136396630, 1396684180, 1852894373, 1142707192, },
            new int[] { 170495788,  672113402,  168634318, 1965254903, }, new int[] { 213119735,  840141752, 1284534722, 1382826804, },
            new int[] { 266399669,  513306278, 1605668403,  654791682, }, new int[] { 166499793,  589251880,  466671840,  140809345, },
            new int[] { 208124741, 1273435762,  583339800,  176011681, }, new int[] { 260155926, 2128665614, 1802916574,  220014602, },
            new int[] { 162597454,  793545097,  589951946, 1748121862, }, new int[] { 203246817, 2065673195, 1274310845, 1111410503, },
            new int[] { 254058522,  971478758, 1056017644, 1926134041, }, new int[] { 158786576, 1144045136,  123140116,  130091952, },
            new int[] { 198483220, 1430056420,  153925145,  162614940, }, new int[] { 248104025, 1787570525,  192406431,  740139587, },
            new int[] { 155065016,  311925210,  388689475, 1267893610, }, new int[] { 193831270,  389906512, 1559603668, 1047996100, },
            new int[] { 242289087, 1561124964, 1949504585, 1309995125, }, new int[] { 151430679, 1781009471,  144698542,   13440585, },
            new int[] { 189288349, 1689390926, 1791485913, 1090542555, }, new int[] { 236610437,  501125922, 1165615567, 1900049106, },
            new int[] { 147881523,  581639157, 1265380641, 1992837059, }, new int[] { 184851904,  190178034, 2118596714,  880433588, },
            new int[] { 231064880,  237722543, 1574504069,   26800161, }, new int[] { 144415550,  148576589, 1789371411,  285185557, },
            new int[] { 180519437, 1259462561,  626101527, 1967094682, }, new int[] { 225649296, 2111199113, 1319497821, 1921997441, },
            new int[] { 141030810, 1319499446,   19379770, 1469683856, }, new int[] { 176288513,  575632483, 1097966537,  763362996, },
            new int[] { 220360641, 1256411516,  835587259, 1491074658, }, new int[] { 137725400, 2127434477, 1595983861,  663486205, },
            new int[] { 172156751,  511809449,  384367090, 1366228668, }, new int[] { 215195939,  102890899, 1017329775,  634044011, },
            new int[] { 134497461, 1943355004,  367395653, 1201583875, }, new int[] { 168121827,  818581019,  459244566, 2038850756, },
            new int[] { 210152284,  486355362,   37184796, 1474821621, }, new int[] { 262690355,  607944202, 1120222819, 1843527026, },
            new int[] { 164181472,  111529670, 1237010174,  883768935, }, new int[] { 205226840,  139412088,  472520894,   30969345, },
            new int[] { 256533550,  174265110,  590651117, 1112453505, }, new int[] { 160333468, 1719528429, 1979769684,  963718897, },
            new int[] { 200416836,    1926889,  864099369, 1204648621, }, new int[] { 250521045,    2408611, 1616995123, 2042681688, },
            new int[] { 156575653,  269940838,  742186496, 1008240599, }, new int[] { 195719566,  874296959, 2001474944, 1260300749, },
            new int[] { 244649458,   19129375, 1964972768, 1575375936, }, new int[] { 152905911,  548826771, 2033414348,  984609960, },
            new int[] { 191132389,  149162552, 2004897023, 1230762450, }, new int[] { 238915486,  723324103,  358637631, 1001582151, },
            new int[] { 149322178, 2062690300, 1029454887, 1431295212, }, new int[] { 186652723, 1504621051, 1286818609, 1252248103, },
            new int[] { 233315904, 1343905402, 1071652349, 2102181041, }, new int[] { 145822440,  839940876, 1206653630, 1582298607, },
            new int[] { 182278050, 1049926095, 1508317038,  904131434, }, new int[] { 227847563,  238665795, 1348525386,   56422469, },
            new int[] { 142404726, 2028214314,  574392910,  572134955, }, new int[] { 178005908, 1461526068, 1791732961, 1788910518, },
            new int[] { 222507385, 1826907586,   92182554,  625525411, }, new int[] { 139067116,  336510873,  594485008,  927824294, },
            new int[] { 173833895,  420638591, 1279977172, 1159780368, }, new int[] { 217292368, 2136410975, 1063100553, 1449725460, },
            new int[] { 135807730, 1335256859, 1469744214,  100772044, }, new int[] { 169759663,  595329250, 1300309355, 1199706879, },
            new int[] { 212199579,  207290651,  551644870,  962762687, }, new int[] { 265249473, 1869726050,  152685176,  129711535, },
            new int[] { 165780921,  363272413,  632299147,   81069709, }, new int[] { 207226151,  990961428, 1327244845, 1711949873, },
        };

        private static readonly int POW5_INV_BITCOUNT = 122; // max 3*31 = 124

        private static readonly int[][] POW5_INV_SPLIT = new int[NEG_TABLE_SIZE][] {
            new int[] { 536870912,          0,          0,          1, }, new int[] { 429496729, 1288490188, 1717986918,  858993460, },
            new int[] { 343597383, 1460288880, 1374389534, 1546188227, }, new int[] { 274877906, 2027224563, 1529008357,  807453852, },
            new int[] { 439804651,  237082194, 1587419912, 1291926163, }, new int[] { 351843720, 1907652674,  410942470, 1892534390, },
            new int[] { 281474976, 1526122139,  758250706,  655034053, }, new int[] { 450359962, 1582801963, 1642697859, 1477551214, },
            new int[] { 360287970,  407248111, 1743655017,  752544241, }, new int[] { 288230376,  325798489,  965427284,  602035393, },
            new int[] { 461168601, 1809767771, 1974180384,  963256629, }, new int[] { 368934881, 1018317487, 2008841037,  341108574, },
            new int[] { 295147905,  385157260, 1607072829, 1561377048, }, new int[] { 472236648,  616251617,  423832879, 1209713087, },
            new int[] { 377789318, 1351994752, 2057053222,  108777011, }, new int[] { 302231454, 1940589261, 1216145848,   87021609, },
            new int[] { 483570327, 1816452629, 1516336627,  568731303, }, new int[] { 386856262,  594168644, 1213069301, 1743475232, },
            new int[] { 309485009, 1763825104,  970455441,  965283456, }, new int[] { 495176015, 1533629978,  693735247,  255963340, },
            new int[] { 396140812, 1226903982, 1413981656, 1922757591, }, new int[] { 316912650,  122529726, 1990178784, 1538206073, },
            new int[] { 507060240,  196047563,  177808948,  743142797, }, new int[] { 405648192,  156838050, 1001240617, 1883004427, },
            new int[] { 324518553, 1413960629,  371495764, 1506403542, }, new int[] { 519229685, 1832840277,  164896493, 1980748937, },
            new int[] { 415383748, 1466272221, 1420407383, 2014095879, }, new int[] { 332306998, 2032011236, 1136325907,  322786514, },
            new int[] { 531691198,  674237600, 1818121451,  945955152, }, new int[] { 425352958, 1398383539, 1883993890, 1615757581, },
            new int[] { 340282366, 1977700291,  218704923, 1722102795, }, new int[] { 272225893, 1152663503,  604460668, 1377682236, },
            new int[] { 435561429, 1414764875, 1396633799,  915801388, }, new int[] { 348449143, 1561308630,  258313580,  732641111, },
            new int[] { 278759314, 2108040363,  636147593, 1874603077, }, new int[] { 446014903, 2084374392, 1017836150,  422384546, },
            new int[] { 356811923,  379009325,  384772190, 1196901096, }, new int[] { 285449538, 1162200919,  737314482,   98527418, },
            new int[] { 456719261, 1430024741,  750206441, 1446134057, }, new int[] { 365375409,  714523063, 1029661882, 2015900705, },
            new int[] { 292300327, 1001115180,  823729506,  753727105, }, new int[] { 467680523, 2031281018,  458973750, 2064956827, },
            new int[] { 374144419,  336534625, 1655669189, 1222468732, }, new int[] { 299315535,  698724430,  465541892,  977974986, },
            new int[] { 478904856, 1117959088,  744867027, 1994256706, }, new int[] { 383123885,  464870541,  166396892, 1595405365, },
            new int[] { 306499108,  371896432, 1851104432, 1276324292, }, new int[] { 490398573,  165537562, 2102773632, 2042118867, },
            new int[] { 392318858,  991423509, 1252722176, 1633695094, }, new int[] { 313855086, 1652132266, 1861171200, 1306956075, },
            new int[] { 502168138, 1784418167, 1689383732,  373142802, }, new int[] { 401734511,  139044345,  922010256,  298514241, },
            new int[] { 321387608, 1829222394, 1596601664,  238811393, }, new int[] { 514220174,  349775453, 2125065932, 2100085147, },
            new int[] { 411376139,  709317092, 1700052746,  821074659, }, new int[] { 329100911,  996950403, 1789538926, 1515853186, },
            new int[] { 526561458,  736127186, 2004268823, 1136874909, }, new int[] { 421249166, 1447895208, 1603415058, 1768493386, },
            new int[] { 336999333,  728819437,  853235317,  985297980, }, new int[] { 269599466, 1442049009,  253091524,  788238384, },
            new int[] { 431359146, 1448284955,  834443168, 1261181414, }, new int[] { 345087317,  729131234, 1526547994,  149951672, },
            new int[] { 276069853, 1871795176, 1221238395,  549458067, }, new int[] { 441711766,  417891904, 1953981432,  879132907, },
            new int[] { 353369412, 2052300442,  704191686, 1562299785, }, new int[] { 282695530,  782846894, 1422346808, 1249839828, },
            new int[] { 452312848, 1252555031,  987264704, 1999743725, }, new int[] { 361850278, 1861037484,  789811763, 2029291709, },
            new int[] { 289480223,  200339798, 1490842870,  764439908, }, new int[] { 463168356, 2038530596,  667361674,  364110394, },
            new int[] { 370534685, 1201327747,  963386068, 2009275234, }, new int[] { 296427748,  961062197, 2059199043, 2036916917, },
            new int[] { 474284397, 1108202787,  288241363,  252589959, }, new int[] { 379427518,   27568770, 1089586549, 1490562156, },
            new int[] { 303542014,  881048475, 1301165969,  762952996, }, new int[] { 485667223,  121187372,  363878632, 1220724793, },
            new int[] { 388533778,  955943356, 2009089824,  976579834, }, new int[] { 310827022, 1623748144, 1607271859, 1210760597, },
            new int[] { 497323236,  880010113,  424151327,  648726766, }, new int[] { 397858589,  274511360, 2057307980,  518981413, },
            new int[] { 318286871,  649105818,  786852924, 2133172049, }, new int[] { 509258994,  179575850,  399971220, 1695088360, },
            new int[] { 407407195,  573157409, 1608467165,  926573958, }, new int[] { 325925756,  458525927, 1716270461, 2029749355, },
            new int[] { 521481209, 2022131673,  598549091,  241121861, }, new int[] { 417184967, 2047202068,  478839272, 1910884407, },
            new int[] { 333747974,  778768195,  812568147, 1958204256, }, new int[] { 533996758, 2105022571, 1729605766,  556146431, },
            new int[] { 427197407,  395527868, 1383684613,   15420415, }, new int[] { 341757925, 1604912483, 1536444420,   12336332, },
            new int[] { 273406340, 1283929986, 2088148995,  439365796, }, new int[] { 437450144, 2054287979,  334561285,  273488543, },
            new int[] { 349960115, 2072927112, 1985635946, 1077784294, }, new int[] { 279968092, 1658341690,  729515298,    3233976, },
            new int[] { 447948948,  935359786,  308231017, 1293664550, }, new int[] { 358359158, 1607281288,  246584814,  175938181, },
            new int[] { 286687326, 2144818489, 1485758040,  140750545, }, new int[] { 458699723,  425232476,  659225945, 1513691060, },
            new int[] { 366959778, 1199179440,  527380756, 1210952848, }, new int[] { 293567822, 1818337011,  851401334, 1827755738, },
            new int[] { 469708516, 1191352299, 1791738865,  776925532, }, new int[] { 375766813,  523585110,  574397633,  192043696, },
            new int[] { 300613450, 1277861547,  889014836,  153634957, }, new int[] { 480981520, 2044578475, 1851920467,  675312661, },
            new int[] { 384785216, 1635662780, 1481536373, 1828740318, }, new int[] { 307828173,  879033494, 2044222558,  603998795, },
            new int[] { 492525077,  976956862,  693775715, 1395894801, }, new int[] { 394020061, 2070055678, 1414014031, 1546212571, },
            new int[] { 315216049, 1226547813,  701714495, 1666466786, }, new int[] { 504345679,  673986312, 1122743193,  518863210, },
            new int[] { 403476543,  968685779, 1327691284,  415090568, }, new int[] { 322781234, 1633942082, 1921146486, 1191065914, },
            new int[] { 516449975, 1325817143, 1785344189, 1476208732, }, new int[] { 413159980, 1060653715,  139785162, 2039960445, },
            new int[] { 330527984,  848522972,  111828130,  772974897, }, new int[] { 528844775,   69146566, 1037918467, 1666256564, },
            new int[] { 423075820,   55317253,  400838044, 1333005251, }, new int[] { 338460656,   44253802, 1179663894, 1925397660, },
            new int[] { 270768524, 1753389960,  943731115, 1969814858, }, new int[] { 433229639, 1516933747, 1939466515,  145226665, },
            new int[] { 346583711, 1643043727, 1981069941, 1404671521, }, new int[] { 277266969,  884938252, 1584855953,  694240487, },
            new int[] { 443627151,  127411015, 1247279336, 1110784780, }, new int[] { 354901720, 1819915730, 1856816928,  888627824, },
            new int[] { 283921376, 1455932584, 1485453542, 1569895718, }, new int[] { 454274202, 1470498676,  658738749, 2082336419, },
            new int[] { 363419362,  317405481, 1815481188, 1665869136, }, new int[] { 290735489, 1542414574,  593391491, 1762192038, },
            new int[] { 465176783, 1179373130,   90432927, 1531017072, }, new int[] { 372141426, 1802491963,  501843071, 1654310387, },
            new int[] { 297713141, 1012496840, 2119461375, 1752945040, }, new int[] { 476341026,  761001486,  814157823, 1516221874, },
            new int[] { 381072821,  179304459, 1080822988, 1212977499, }, new int[] { 304858256, 1861430486,    5664931, 1399878729, },
            new int[] { 487773210, 2119295318,  868057349, 1810309237, }, new int[] { 390218568, 1695436254, 1553439339,  159757201, },
            new int[] { 312174855,   67858814, 2101744930,  986799220, }, new int[] { 499479768,  108574103, 2074301699, 2008375481, },
            new int[] { 399583814,  945852742,  800447900, 1606700385, }, new int[] { 319667051, 1186178923, 1069855050,  426366849, },
            new int[] { 511467282, 1038892818,  852774621,  252690228, }, new int[] { 409173825, 2119604443, 1111716426, 1061145642, },
            new int[] { 327339060, 1695683554, 1748366600,  848916514, }, new int[] { 523742497,  565610039, 1508896371, 1787763151, },
            new int[] { 418993997, 1740978220, 1207117097, 1000713792, }, new int[] { 335195198,  533789117,  536196948,  800571033, },
            new int[] { 536312317,  424565857, 2146405306,  421920194, }, new int[] { 429049853, 1628142875,  428634056,  337536155, },
            new int[] { 343239883,   14024111,  772403974, 1129022383, }, new int[] { 274591906,  870212748,  617923179, 1332714636, },
            new int[] { 439347050,  533346938,  129683628,  414356500, }, new int[] { 351477640,  426677550,  962740361, 1619975389, },
            new int[] { 281182112,  341342040,  770192289,  866483581, }, new int[] { 449891379,  975643994,  373314203, 1815870459, },
            new int[] { 359913103, 1210011924, 2016638281, 1023199638, }, new int[] { 287930482, 1827002999,  324820436,  818559711, },
            new int[] { 460688772, 1205217880,  519712698,  450702077, }, new int[] { 368551018,  105180844, 2133757076, 2078548580, },
            new int[] { 294840814,  943138135,  418515472, 1662838864, }, new int[] { 471745303,  220530827, 1099121486,   83561805, },
            new int[] { 377396242, 1035418121,  449800459,  496346174, }, new int[] { 301916993, 2116824685, 1648330556,  397076939, },
            new int[] { 483067190,  809939119, 1348838701,  205826373, }, new int[] { 386453752,  647951295, 1508567690, 1023654558, },
            new int[] { 309163001, 1806851225,  777357422, 1677917105, }, new int[] { 494660802, 2031968501,  814275146, 1825673909, },
            new int[] { 395728642,  766581341, 1939910306,  601545668, }, new int[] { 316582913, 1901755262,  692934785, 1769726723, },
            new int[] { 506532662,  465828042,  249702198,  254582380, }, new int[] { 405226129, 1661152622, 1058755217, 1492156093, },
            new int[] { 324180903, 1758418827, 1276500903, 1623221604, }, new int[] { 518689446,  236489746, 1183407986, 1738161106, },
            new int[] { 414951556, 1907178715, 1376223119,  102038696, }, new int[] { 331961245, 1096246242, 1959971954,  940624416, },
            new int[] { 531137992, 1753993988, 1417968208, 1504999066, }, new int[] { 424910394,  544201731, 1563871296, 1203999253, },
            new int[] { 339928315,  864858114, 2110090496,  963199402, }, new int[] { 271942652,  691886491, 2117569126, 1629552981, },
            new int[] { 435108243, 1536515116, 1670123684,  889297851, }, new int[] { 348086594, 2088205552, 1336098947, 1140935011, },
            new int[] { 278469275, 2100061171, 1498375887, 1342244738, }, new int[] { 445550841, 1212614226, 1538407961,     107933, },
            new int[] { 356440673,  540594651, 1660223098,  859079806, }, new int[] { 285152538, 1291469180, 1328178478, 1546257304, },
            new int[] { 456244061, 1636853959,  836595377,  326528038, }, new int[] { 364995249,  879986437, 1957766490, 1120215890, },
            new int[] { 291996199, 1133485879, 1995709922,   37179253, }, new int[] { 467193919,  525087219,  186658768,   59486804, },
            new int[] { 373755135,  849566504, 1867313932, 1765576362, }, new int[] { 299004108,  679653203, 1923347875, 1841957819, },
            new int[] { 478406573,  657948396, 1359369682, 2088139051, }, new int[] { 382725258, 1385352176, 1087495746,  811517782, },
            new int[] { 306180206, 1967275200,  869996597,  219717496, }, new int[] { 489888331,  141163213,  962497825, 1640038182, },
            new int[] { 391910664, 1830917489,  340501531,   23540357, }, new int[] { 313528531, 1894230720, 1990388143,  448329015, },
            new int[] { 501645651,   24292046,  607640651, 1146823153, }, new int[] { 401316520, 1737420555,  915609250, 1776451982, },
            new int[] { 321053216, 1389936444,  732487400, 1421161586, }, new int[] { 513685146, 1364904851, 1601476570, 1414865078, },
            new int[] { 410948117,  662427151, 1710677986,  272898603, }, new int[] { 328758493, 1818431910,  509548929, 1506809071, },
            new int[] { 526013590,  332510678, 1674271746, 1551901055, }, new int[] { 420810872,  266008543,   50927208, 1241520844, },
            new int[] { 336648697, 1501297023,  470238496,  993216675, }, new int[] { 269318958,  342044159,  805687526, 1653566799, },
            new int[] { 430910333,  117773925,  859603313,  498223231, }, new int[] { 344728266,  953212599, 1117179380,  398578585, },
            new int[] { 275782613,  333073350,   34750044, 2036849786, }, new int[] { 441252181,  103420630,  914593531,  252482550, },
            new int[] { 353001744, 1800723422, 1590668284,  201986040, }, new int[] { 282401395, 1870075467, 1702031356, 1879575751, },
            new int[] { 451842233,  844637100, 1005263252, 1289334283, }, new int[] { 361473786, 1534703139, 1233707331, 1460964156, },
            new int[] { 289179029,  798265782,  127972406,  309777866, }, new int[] { 462686446, 2136218710, 1063749309,   66147855, },
            new int[] { 370149157, 1279478238, 1709992906,  911911743, }, new int[] { 296119326,  164589131, 1797491054, 1588522854, },
            new int[] { 473790921, 1551832799, 1587495498, 1682643107, }, new int[] { 379032737,  811969510,  411002939, 1775611215, },
            new int[] { 303226189, 1938065796, 2046789270,  561495513, }, new int[] { 485161903, 1812415086,  697882454, 1757386280, },
            new int[] { 388129523,  161441880,  558305963, 1835405753, }, new int[] { 310503618,  988146963,  876141500, 1468324603, },
            new int[] { 496805789, 1151538411, 1831323130, 1490325905, }, new int[] { 397444631, 1350727459,  176568315, 1621757454, },
            new int[] { 317955705,  651085237, 1429744841,  867909234, }, new int[] { 508729128, 1041736380,  569604827, 1818151503, },
            new int[] { 406983302, 1692382563,  885180591, 1884017932, }, new int[] { 325586642,  494912591, 1137641203,  218724157, },
            new int[] { 520938627, 1221356876,  102239006, 1208952110, }, new int[] { 416750902,  118092041, 1370281394,  108168229, },
            new int[] { 333400721, 1382963822,  237231656,   86534583, }, new int[] { 533441154, 1353748656,  379570649, 1426945522, },
            new int[] { 426752923, 1512495654, 1162649978, 2000549877, }, new int[] { 341402338, 2068989982, 1789113442,  741446442, },
            new int[] { 273121871,  366701797, 1001794024,  593157154, }, new int[] { 436994993, 1875213064, 1602870438, 1808044905, },
            new int[] { 349595995,  211680262, 2141289810,  587442465, }, new int[] { 279676796,  169344210,  854038389,   40457242, },
            new int[] { 447482873, 1559440925,  936964692, 1782718506, }, new int[] { 357986298, 2106546199, 1179068483, 1855671535, },
            new int[] { 286389039,  396746770, 1802248246,  625543769, }, new int[] { 458222462, 1493788292, 1165610275, 1430366759, },
            new int[] { 366577970,  336037174, 1791481679, 1573790137, }, new int[] { 293262376,  268829739, 1862682073,  829535380, },
            new int[] { 469219801, 1718617772, 1262304399,   38766419, }, new int[] { 375375841,  945397488, 1009843519,  460509865, },
            new int[] { 300300673,  326821261,  378378085, 1656898081, }, new int[] { 480481077,   93417288,  605404937,  503553281, },
            new int[] { 384384861, 1363224019,  913820679,  832339354, }, new int[] { 307507889,  661082485, 2019546732,  665871484, },
            new int[] { 492012622, 1916725436, 1513287853,  635897644, }, new int[] { 393610098,  674386890,  351636823,  938214845, },
            new int[] { 314888078, 1398502971,  710806188,  750571876, }, new int[] { 503820925, 1808108024, 1137289901,  771418272, },
            new int[] { 403056740, 1446486419, 1339328650, 1476128077, }, new int[] { 322445392, 1157189135, 1500959650,  321909002, },
            new int[] { 515912628,  133515698, 1542541981,   85557674, }, new int[] { 412730102,  965806018,  375040125, 1356936328, },
            new int[] { 330184081, 2061135003,  729528830,  226555603, }, new int[] { 528294531,  291338898,  308252668, 2080475883, },
            new int[] { 422635624, 1951058036, 1964589053, 1234883977, }, new int[] { 338108499, 1990343159,  283181054,  128913723, },
            new int[] { 270486799, 2021771256, 1944531761, 1391621167, }, new int[] { 432778879, 1946343822,  534270441,   79110219, },
            new int[] { 346223103, 1986571787,  856913082,  922281634, }, new int[] { 276978483,  300767241,  256033736,  737825308, },
            new int[] { 443165573,   51730856,  409653978,  321527033, }, new int[] { 354532458,  900378144,  327723182, 1116215085, },
            new int[] { 283625966, 1579295974, 1121172005,  463475339, }, new int[] { 453801546, 1667880100,   75888289, 2030050731, },
            new int[] { 363041237,  904807350,  919704091,  335550396, }, new int[] { 290432989, 2012336069,  306266543,  697937046, },
            new int[] { 464692783, 1931247521, 1778516658,  257705815, }, new int[] { 371754227,  256507828, 1422813326, 1065158111, },
            new int[] { 297403381, 1493696451, 1567747390, 1711119948, }, new int[] { 475845410, 1530920863, 1219905636, 1019804998, },
            new int[] { 380676328, 1224736690, 1834917968,  815843999, }, new int[] { 304541062, 1838782811, 1897431104,  652675199, },
            new int[] { 487265700, 1224065580, 1317902848, 1044280318, }, new int[] { 389812560,  979252464, 1054322278, 1694417714, },
            new int[] { 311850048,  783401971, 1272954552, 1355534171, }, new int[] { 498960077,  823946424, 2036727284,  450867755, },
            new int[] { 399168061, 1947647328, 1629381827,  790190934, }, new int[] { 319334449, 1128621133,  874008732,  632152747, },
            new int[] { 510935119,  517303624, 1398413971, 1440941125, }, new int[] { 408748095,  843339629,  689234447, 1582249629, },
            new int[] { 326998476,  674671703,  980884287, 1695296433, }, new int[] { 523197562,  220481266,  710421401,  564990645, },
            new int[] { 418558049, 1464875201, 1856827309, 1740482705, },
        };

        #endregion Production Tables

        //public static void Main(string[] args)
        //{
        //    DEBUG = true;
        //    double value = BitConversion.Int64BitsToDouble(0x7fefffffffffffffL);
        //    string result = ToString(value, NumberFormatInfo.InvariantInfo);
        //    Console.WriteLine(result + " " + value);
        //}

        public static string ToString(double value, NumberFormatInfo info)
        {
            return ToString(value, info, RoundingMode.RoundEven, upperCase: true);
        }

        public static string ToString(double value, NumberFormatInfo info, bool upperCase)
        {
            return ToString(value, info, RoundingMode.RoundEven, upperCase);
        }

        public static string ToString(double value, NumberFormatInfo info, RoundingMode roundingMode)
        {
            return ToString(value, info, roundingMode, upperCase: true);
        }

        public static string ToString(double value, NumberFormatInfo info, RoundingMode roundingMode, bool upperCase)
        {
            // Step 1: Decode the floating point number, and unify normalized and subnormal cases.
            // First, handle all the trivial cases.
            if (!value.IsFinite())
            {
                if (double.IsNaN(value))
                {
                    return info.NaNSymbol;
                }

                return value.IsNegative() ? info.NegativeInfinitySymbol : info.PositiveInfinitySymbol;
            }
            long bits = BitConversion.DoubleToRawInt64Bits(value); // J2N: Since we have checked for NaN above, it is quicker to call DoubleToRawInt64Bits
            if (bits == 0) return string.Concat("0", info.NumberDecimalSeparator, "0");
            if (bits == unchecked((long)0x8000000000000000L)) return string.Concat(info.NegativeSign, "0", info.NumberDecimalSeparator, "0");

            // Otherwise extract the mantissa and exponent bits and run the full algorithm.
            int ieeeExponent = (int)((bits.TripleShift(DOUBLE_MANTISSA_BITS)) & DOUBLE_EXPONENT_MASK);
            long ieeeMantissa = bits & DOUBLE_MANTISSA_MASK;
            int e2;
            long m2;
            if (ieeeExponent == 0)
            {
                // Denormal number - no implicit leading 1, and the exponent is 1, not 0.
                e2 = 1 - DOUBLE_EXPONENT_BIAS - DOUBLE_MANTISSA_BITS;
                m2 = ieeeMantissa;
            }
            else
            {
                // Add implicit leading 1.
                e2 = ieeeExponent - DOUBLE_EXPONENT_BIAS - DOUBLE_MANTISSA_BITS;
                m2 = ieeeMantissa | (1L << DOUBLE_MANTISSA_BITS);
            }

            bool sign = bits < 0;
#if DEBUG
            if (DEBUG)
            {
                Console.WriteLine("IN=" + bits.ToBinaryString());
                Console.WriteLine("   S=" + (sign ? "-" : "+") + " E=" + e2 + " M=" + m2);
            }
#endif

            // Step 2: Determine the interval of legal decimal representations.
            bool even = (m2 & 1) == 0;
            long mv = 4 * m2;
            long mp = 4 * m2 + 2;
            int mmShift = ((m2 != (1L << DOUBLE_MANTISSA_BITS)) || (ieeeExponent <= 1)) ? 1 : 0;
            long mm = 4 * m2 - 1 - mmShift;
            e2 -= 2;

#if DEBUG
            if (DEBUG)
            {
                string sv, sp, sm;
                int e10Debug;
                if (e2 >= 0)
                {
                    sv = (new BigInteger(mv) << e2).ToString(CultureInfo.InvariantCulture);
                    sp = (new BigInteger(mp) << e2).ToString(CultureInfo.InvariantCulture);
                    sm = (new BigInteger(mm) << e2).ToString(CultureInfo.InvariantCulture);
                    e10Debug = 0;
                }
                else
                {
                    BigInteger factor = BigInteger.Pow(5, -e2);
                    sv = (new BigInteger(mv) * factor).ToString(CultureInfo.InvariantCulture);
                    sp = (new BigInteger(mp) * factor).ToString(CultureInfo.InvariantCulture);
                    sm = (new BigInteger(mm) * factor).ToString(CultureInfo.InvariantCulture);
                    e10Debug = e2;
                }

                e10Debug += sp.Length - 1;

                Console.WriteLine("E =" + e10Debug);
                Console.WriteLine("d+=" + sp);
                Console.WriteLine("d =" + sv);
                Console.WriteLine("d-=" + sm);
                Console.WriteLine("e2=" + e2);
            }
#endif

            // Step 3: Convert to a decimal power base using 128-bit arithmetic.
            // -1077 = 1 - 1023 - 53 - 2 <= e_2 - 2 <= 2046 - 1023 - 53 - 2 = 968
            long dv, dp, dm;
            int e10;
            bool dmIsTrailingZeros = false, dvIsTrailingZeros = false;
            if (e2 >= 0)
            {
                int q = Math.Max(0, (e2 * 78913).TripleShift(18) - 1);
                // k = constant + floor(log_2(5^q))
                int k = POW5_INV_BITCOUNT + Pow5bits(q) - 1;
                int i = -e2 + q + k;
                dv = MulPow5InvDivPow2(mv, q, i);
                dp = MulPow5InvDivPow2(mp, q, i);
                dm = MulPow5InvDivPow2(mm, q, i);
                e10 = q;
#if DEBUG
                if (DEBUG)
                {
                    Console.WriteLine(mv + " * 2^" + e2);
                    Console.WriteLine("V+=" + dp);
                    Console.WriteLine("V =" + dv);
                    Console.WriteLine("V-=" + dm);
                }
                if (DEBUG)
                {
                    long exact = (long)(POW5_INV[q]
                        * mv
                        >> (-e2 + q + k)) /*.longValueExact()*/;
                    Console.WriteLine(exact + " " + POW5_INV[q].ToByteArray().Length * sizeof(byte)); // Bit length
                    if (dv != exact)
                    {
                        throw new InvalidOperationException();
                    }
                }
#endif

                if (q <= 21)
                {
                    if (mv % 5 == 0)
                    {
                        dvIsTrailingZeros = MultipleOfPowerOf5(mv, q);
                    }
                    else if (roundingMode.AcceptUpperBound(even))
                    {
                        dmIsTrailingZeros = MultipleOfPowerOf5(mm, q);
                    }
                    else if (MultipleOfPowerOf5(mp, q))
                    {
                        dp--;
                    }
                }
            }
            else
            {
                int q = Math.Max(0, ((-e2 * 732923).TripleShift(20)) - 1);
                int i = -e2 - q;
                int k = Pow5bits(i) - POW5_BITCOUNT;
                int j = q - k;
                dv = MulPow5divPow2(mv, i, j);
                dp = MulPow5divPow2(mp, i, j);
                dm = MulPow5divPow2(mm, i, j);
                e10 = q + e2;
#if DEBUG
                if (DEBUG)
                {
                    Console.WriteLine(mv + " * 5^" + (-e2) + " / 10^" + q);
                }
#endif
                if (q <= 1)
                {
                    dvIsTrailingZeros = true;
                    if (roundingMode.AcceptUpperBound(even))
                    {
                        dmIsTrailingZeros = mmShift == 1;
                    }
                    else
                    {
                        dp--;
                    }
                }
                else if (q < 63)
                {
                    dvIsTrailingZeros = (mv & ((1L << (q - 1)) - 1)) == 0;
                }
            }
#if DEBUG
            if (DEBUG)
            {
                Console.WriteLine("d+=" + dp);
                Console.WriteLine("d =" + dv);
                Console.WriteLine("d-=" + dm);
                Console.WriteLine("e10=" + e10);
                Console.WriteLine("d-10=" + dmIsTrailingZeros);
                Console.WriteLine("d   =" + dvIsTrailingZeros);
                Console.WriteLine("Accept upper=" + roundingMode.AcceptUpperBound(even));
                Console.WriteLine("Accept lower=" + roundingMode.AcceptLowerBound(even));
            }
#endif

            // Step 4: Find the shortest decimal representation in the interval of legal representations.
            //
            // We do some extra work here in order to follow Float/Double.toString semantics. In particular,
            // that requires printing in scientific format if and only if the exponent is between -3 and 7,
            // and it requires printing at least two decimal digits.
            //
            // Above, we moved the decimal dot all the way to the right, so now we need to count digits to
            // figure out the correct exponent for scientific notation.
            int vplength = DecimalLength(dp);
            int exp = e10 + vplength - 1;

            // Double.toString semantics requires using scientific notation if and only if outside this range.
            bool scientificNotation = !((exp >= -3) && (exp < 7));

            int removed = 0;

            int lastRemovedDigit = 0;
            long output;
            if (dmIsTrailingZeros || dvIsTrailingZeros)
            {
                while (dp / 10 > dm / 10)
                {
                    if ((dp < 100) && scientificNotation)
                    {
                        // Double.toString semantics requires printing at least two digits.
                        break;
                    }
                    dmIsTrailingZeros &= dm % 10 == 0;
                    dvIsTrailingZeros &= lastRemovedDigit == 0;
                    lastRemovedDigit = (int)(dv % 10);
                    dp /= 10;
                    dv /= 10;
                    dm /= 10;
                    removed++;
                }
                if (dmIsTrailingZeros && roundingMode.AcceptLowerBound(even))
                {
                    while (dm % 10 == 0)
                    {
                        if ((dp < 100) && scientificNotation)
                        {
                            // Double.toString semantics requires printing at least two digits.
                            break;
                        }
                        dvIsTrailingZeros &= lastRemovedDigit == 0;
                        lastRemovedDigit = (int)(dv % 10);
                        dp /= 10;
                        dv /= 10;
                        dm /= 10;
                        removed++;
                    }
                }
                if (dvIsTrailingZeros && (lastRemovedDigit == 5) && (dv % 2 == 0))
                {
                    // Round even if the exact numbers is .....50..0.
                    lastRemovedDigit = 4;
                }
                output = dv +
                    ((dv == dm && !(dmIsTrailingZeros && roundingMode.AcceptLowerBound(even))) || (lastRemovedDigit >= 5) ? 1 : 0);
            }
            else
            {
                while (dp / 10 > dm / 10)
                {
                    if ((dp < 100) && scientificNotation)
                    {
                        // Double.toString semantics requires printing at least two digits.
                        break;
                    }
                    lastRemovedDigit = (int)(dv % 10);
                    dp /= 10;
                    dv /= 10;
                    dm /= 10;
                    removed++;
                }
                output = dv + ((dv == dm || (lastRemovedDigit >= 5)) ? 1 : 0);
            }
            int olength = vplength - removed;

#if DEBUG
            if (DEBUG)
            {
                Console.WriteLine("LAST_REMOVED_DIGIT=" + lastRemovedDigit);
                Console.WriteLine("VP=" + dp);
                Console.WriteLine("VR=" + dv);
                Console.WriteLine("VM=" + dm);
                Console.WriteLine("O=" + output);
                Console.WriteLine("OLEN=" + olength);
                Console.WriteLine("EXP=" + exp);
            }
#endif

            // Step 5: Print the decimal representation.
            // We follow Double.toString semantics here.
            //char[] result = new char[24];
            int index = 0;
            string negSign = info.NegativeSign, decimalSeparator = info.NumberDecimalSeparator;
            int negSignLength = (sign ? negSign.Length : 0), decimalSeparatorLength = decimalSeparator.Length;
            // For the exp + 1 >= olength case, we use the max length of 24. The value is derived from
            // the literal 20 + negSignLength + decimalSeparatorLength + 2.
            int bufferLength = Math.Min((exp < 0 ? vplength : (exp + 1 >= olength ? 20 : olength)) + negSignLength + decimalSeparatorLength + (scientificNotation ? 5 : 2), 22 + negSignLength + decimalSeparatorLength);
            unsafe
            {
                const int MaximumStackSize = 64;
                if (bufferLength <= MaximumStackSize)
                {
                    char* result = stackalloc char[bufferLength];
                    WriteBuffer(result, ref index, output, olength, upperCase, sign, exp, scientificNotation, negSign, negSignLength, decimalSeparator, decimalSeparatorLength);
                    return new string(result, 0, index);
                }
                else
                {
                    // Since negSignLength and decimalSeparatorLength are based on user input,
                    // this is a fallback to prevent a stack overflow if these are abused.
                    // This should not ever happen under normal usage.
                    fixed (char* resultPtr = new char[bufferLength])
                    {
                        char* result = resultPtr;
                        WriteBuffer(result, ref index, output, olength, upperCase, sign, exp, scientificNotation, negSign, negSignLength, decimalSeparator, decimalSeparatorLength);
                        return new string(result, 0, index);
                    }
                }
            }
        }

#if FEATURE_METHODIMPLOPTIONS_AGRESSIVEINLINING
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
        private unsafe static void WriteBuffer(char* result, ref int index, long output, int olength, bool upperCase, bool sign, int exp, bool scientificNotation, string negSign, int negSignLength, string decimalSeparator, int decimalSeparatorLength)
        {
            if (sign)
            {
                //result[index++] = '-';
                for (int i = 0; i < negSignLength; i++)
                {
                    result[index++] = negSign[i];
                }
            }

            // Values in the interval [1E-3, 1E7) are special.
            if (scientificNotation)
            {
                // Print in the format x.xxxxxE-yy.
                for (int i = 0; i < olength - 1; i++)
                {
                    int c = (int)(output % 10); output /= 10;
                    //result[index + olength - i] = (char)('0' + c);
                    result[index + olength - i + (decimalSeparatorLength - 1)] = (char)('0' + c);
                }
                result[index] = (char)('0' + output % 10);
                //result[index + 1] = '.';
                //index += olength + 1;
                for (int i = 0; i < decimalSeparatorLength; i++)
                {
                    result[index + 1 + i] = decimalSeparator[i];
                }
                index += olength + decimalSeparatorLength;
                if (olength == 1)
                {
                    result[index++] = '0';
                }

                // Print 'E', the exponent sign, and the exponent, which has at most three digits.
                result[index++] = upperCase ? 'E' : 'e';
                if (exp < 0)
                {
                    result[index++] = '-';
                    exp = -exp;
                }
                if (exp >= 100)
                {
                    result[index++] = (char)('0' + exp / 100);
                    exp %= 100;
                    result[index++] = (char)('0' + exp / 10);
                }
                else if (exp >= 10)
                {
                    result[index++] = (char)('0' + exp / 10);
                }
                result[index++] = (char)('0' + exp % 10);
            }
            else
            {
                // Otherwise follow the Java spec for values in the interval [1E-3, 1E7).
                if (exp < 0)
                {
                    // Decimal dot is before any of the digits.
                    result[index++] = '0';
                    //result[index++] = '.';
                    for (int i = 0; i < decimalSeparatorLength; i++)
                    {
                        result[index++] = decimalSeparator[i];
                    }
                    for (int i = -1; i > exp; i--)
                    {
                        result[index++] = '0';
                    }
                    int current = index;
                    for (int i = 0; i < olength; i++)
                    {
                        result[current + olength - i - 1] = (char)('0' + output % 10);
                        output /= 10;
                        index++;
                    }
                }
                else if (exp + 1 >= olength)
                {
                    // Decimal dot is after any of the digits.
                    for (int i = 0; i < olength; i++)
                    {
                        result[index + olength - i - 1] = (char)('0' + output % 10);
                        output /= 10;
                    }
                    index += olength;
                    for (int i = olength; i < exp + 1; i++)
                    {
                        result[index++] = '0';
                    }
                    //result[index++] = '.';
                    for (int i = 0; i < decimalSeparatorLength; i++)
                    {
                        result[index++] = decimalSeparator[i];
                    }
                    result[index++] = '0';
                }
                else
                {
                    // Decimal dot is somewhere between the digits.
                    //int current = index + 1;
                    int current = index + decimalSeparatorLength;
                    for (int i = 0; i < olength; i++)
                    {
                        if (olength - i - 1 == exp)
                        {
                            //result[current + olength - i - 1] = '.';
                            //current--;
                            for (int j = 0; j < decimalSeparatorLength; j++)
                            {
                                result[current + olength - i - decimalSeparatorLength + j] = decimalSeparator[j];
                            }
                            current -= decimalSeparatorLength;
                        }
                        result[current + olength - i - 1] = (char)('0' + output % 10);
                        output /= 10;
                    }
                    //index += olength + 1;
                    index += olength + decimalSeparatorLength;
                }
            }
        }

#if FEATURE_METHODIMPLOPTIONS_AGRESSIVEINLINING
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
        private static int Pow5bits(int e)
        {
            return ((e * 1217359).TripleShift(19)) + 1;
        }

#if FEATURE_METHODIMPLOPTIONS_AGRESSIVEINLINING
        [MethodImpl(MethodImplOptions.AggressiveInlining)] // J2N: Only called in one place
#endif
        private static int DecimalLength(long v)
        {
            if (v >= 1000000000000000000L) return 19;
            if (v >= 100000000000000000L) return 18;
            if (v >= 10000000000000000L) return 17;
            if (v >= 1000000000000000L) return 16;
            if (v >= 100000000000000L) return 15;
            if (v >= 10000000000000L) return 14;
            if (v >= 1000000000000L) return 13;
            if (v >= 100000000000L) return 12;
            if (v >= 10000000000L) return 11;
            if (v >= 1000000000L) return 10;
            if (v >= 100000000L) return 9;
            if (v >= 10000000L) return 8;
            if (v >= 1000000L) return 7;
            if (v >= 100000L) return 6;
            if (v >= 10000L) return 5;
            if (v >= 1000L) return 4;
            if (v >= 100L) return 3;
            if (v >= 10L) return 2;
            return 1;
        }

#if FEATURE_METHODIMPLOPTIONS_AGRESSIVEINLINING
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
        private static bool MultipleOfPowerOf5(long value, int q)
        {
            return Pow5Factor(value) >= q;
        }

#if FEATURE_METHODIMPLOPTIONS_AGRESSIVEINLINING
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
#endif
        private static int Pow5Factor(long value)
        {
            // We want to find the largest power of 5 that divides value.
            if ((value % 5) != 0) return 0;
            if ((value % 25) != 0) return 1;
            if ((value % 125) != 0) return 2;
            if ((value % 625) != 0) return 3;
            int count = 4;
            value /= 625;
            while (value > 0)
            {
                if (value % 5 != 0)
                {
                    return count;
                }
                value /= 5;
                count++;
            }
            throw new ArgumentException("" + value);
        }

        /// <summary>
        /// Compute the high digits of m * 5^p / 10^q = m * 5^(p - q) / 2^q = m * 5^i / 2^j, with q chosen
        /// such that m * 5^i / 2^j has sufficiently many decimal digits to represent the original floating
        /// point number.
        /// </summary>
        private static long MulPow5divPow2(long m, int i, int j)
        {
            // m has at most 55 bits.
            long mHigh = m.TripleShift(31);
            long mLow = m & 0x7fffffff;
            long bits13 = mHigh * POW5_SPLIT[i][0]; // 124
            long bits03 = mLow * POW5_SPLIT[i][0];  // 93
            long bits12 = mHigh * POW5_SPLIT[i][1]; // 93
            long bits02 = mLow * POW5_SPLIT[i][1];  // 62
            long bits11 = mHigh * POW5_SPLIT[i][2]; // 62
            long bits01 = mLow * POW5_SPLIT[i][2];  // 31
            long bits10 = mHigh * POW5_SPLIT[i][3]; // 31
            long bits00 = mLow * POW5_SPLIT[i][3];  // 0
            int actualShift = j - 3 * 31 - 21;
            if (actualShift < 0)
            {
                throw new ArgumentException("" + actualShift);
            }
            return ((((((
                ((bits00.TripleShift(31)) + bits01 + bits10).TripleShift(31))
                                 + bits02 + bits11).TripleShift(31))
                                 + bits03 + bits12).TripleShift(21))
                                 + (bits13 << 10)).TripleShift(actualShift);
        }

        /// <summary>
        /// Compute the high digits of m / 5^i / 2^j such that the result is accurate to at least 9
        /// decimal digits. i and j are already chosen appropriately.
        /// </summary>
        private static long MulPow5InvDivPow2(long m, int i, int j)
        {
            // m has at most 55 bits.
            long mHigh = m.TripleShift(31);
            long mLow = m & 0x7fffffff;
            long bits13 = mHigh * POW5_INV_SPLIT[i][0];
            long bits03 = mLow * POW5_INV_SPLIT[i][0];
            long bits12 = mHigh * POW5_INV_SPLIT[i][1];
            long bits02 = mLow * POW5_INV_SPLIT[i][1];
            long bits11 = mHigh * POW5_INV_SPLIT[i][2];
            long bits01 = mLow * POW5_INV_SPLIT[i][2];
            long bits10 = mHigh * POW5_INV_SPLIT[i][3];
            long bits00 = mLow * POW5_INV_SPLIT[i][3];

            int actualShift = j - 3 * 31 - 21;
            if (actualShift < 0)
            {
                throw new ArgumentException("" + actualShift);
            }
            return ((((((
                ((bits00.TripleShift(31)) + bits01 + bits10).TripleShift(31))
                                 + bits02 + bits11).TripleShift(31))
                                 + bits03 + bits12).TripleShift(21))
                                 + (bits13 << 10)).TripleShift(actualShift);
        }
    }
}
