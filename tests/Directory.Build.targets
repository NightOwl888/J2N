<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <Import Project="$([MSBuild]::GetPathOfFileAbove('Directory.Build.targets', '$(MSBuildThisFileDirectory)../'))" />
  
  <PropertyGroup Label="Warnings to be Disabled in Test Projects">
    <NoWarn Label="Do not catch general exception types">$(NoWarn);CA1031</NoWarn>
    <NoWarn Label="Implement standard exception constructors">$(NoWarn);CA1032</NoWarn>
    <NoWarn Label="Nested types should not be visible">$(NoWarn);CA1034</NoWarn>
    <NoWarn Label="Static holder types should be Static or NotInheritable">$(NoWarn);CA1052</NoWarn>
    <NoWarn Label="Use Literals Where Appropriate">$(NoWarn);CA1802</NoWarn>
    <NoWarn Label="Override equals and operator equals on value types">$(NoWarn);CA1815</NoWarn>
    <NoWarn Label="Properties should not return arrays">$(NoWarn);CA1819</NoWarn>
    <NoWarn Label="Test for empty strings using string length">$(NoWarn);CA1820</NoWarn>
    <NoWarn Label="Mark members as static">$(NoWarn);CA1822</NoWarn>
    <NoWarn Label="Avoid zero-length array allocations">$(NoWarn);CA1825</NoWarn>
    <NoWarn Label="Do not use Count/LongCount when Any can be used">$(NoWarn);CA1827</NoWarn>
    <NoWarn Label="Prefer Dictionary Contains methods">$(NoWarn);CA1841</NoWarn>
    <NoWarn Label="Mark ISerializable types with SerializableAttribute">$(NoWarn);CA2237</NoWarn>
    
    <NoWarn Label="The variable 'var' is declared but never used">$(NoWarn);CS0168</NoWarn>
    <NoWarn Label="Missing XML comment for publicly visible type or member 'Type_or_Member'">$(NoWarn);CS1591</NoWarn>

    <NoWarn Label="Use object initializers">$(NoWarn);IDE0017</NoWarn>
    <NoWarn Label="Variable declaration can be inlined">$(NoWarn);IDE0018</NoWarn>
    <NoWarn Label="Use pattern matching to avoid 'as' followed by a 'null' check">$(NoWarn);IDE0019</NoWarn>
    <NoWarn Label="Use collection initializers">$(NoWarn);IDE0028</NoWarn>
    <NoWarn Label="Use null propagation">$(NoWarn);IDE0031</NoWarn>
    <NoWarn Label="'default' expression can be simplified">$(NoWarn);IDE0034</NoWarn>
    <NoWarn Label="Use local function instead of lambda">$(NoWarn);IDE0039</NoWarn>
    <NoWarn Label="Add readonly modifier">$(NoWarn);IDE0044</NoWarn>
    <NoWarn Label="Unnecessary assignment of a value">$(NoWarn);IDE0059</NoWarn>
    <NoWarn Label="Remove unused parameter">$(NoWarn);IDE0060</NoWarn>
    <NoWarn Label="Naming Styles">$(NoWarn);IDE1006</NoWarn>
  </PropertyGroup>
  
  <UsingTask TaskName="UpdateRuntimeConfigProperty" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <RuntimeConfigFile ParameterType="System.String" Required="true" />
      <PropertyName ParameterType="System.String" Required="true" />
      <PropertyValue ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        if (File.Exists(RuntimeConfigFile))
        {
            // Read the file content
            string jsonContent = File.ReadAllText(RuntimeConfigFile);

            // Ensure runtimeOptions and configProperties sections exist
            if (!jsonContent.Contains("\"runtimeOptions\""))
            {
                jsonContent = jsonContent.TrimEnd('}', '\n', '\r') + ",\n  \"runtimeOptions\": {\n    \"configProperties\": {\n    }\n  }\n}";
            }
            if (!jsonContent.Contains("\"configProperties\""))
            {
                int runtimeOptionsIndex = jsonContent.IndexOf("\"runtimeOptions\"");
                int insertPosition = jsonContent.IndexOf('}', runtimeOptionsIndex);
                jsonContent = jsonContent.Insert(insertPosition, ",\n    \"configProperties\": {\n    }\n");
            }

            // Check if the property already exists
            int configPropertiesIndex = jsonContent.IndexOf("\"configProperties\"");
            int propertyIndex = jsonContent.IndexOf("\"" + PropertyName + "\"", configPropertiesIndex);

            if (propertyIndex != -1)
            {
                // Property exists, update its value
                int valueStartIndex = jsonContent.IndexOf(':', propertyIndex) + 1;
                int valueEndIndex = jsonContent.IndexOfAny(new char[] { ',', '}', '\n' }, valueStartIndex);
                jsonContent = jsonContent.Remove(valueStartIndex, valueEndIndex - valueStartIndex)
                                         .Insert(valueStartIndex, " " + PropertyValue);
            }
            else
            {
                // Property does not exist, add it
                int closingBraceIndex = jsonContent.IndexOf('}', configPropertiesIndex);
                jsonContent = jsonContent.Insert(closingBraceIndex, "  \"" + PropertyName + "\": " + PropertyValue + ",\n");
            }

            // Write the updated content back to the file
            File.WriteAllText(RuntimeConfigFile, jsonContent);
        }
        else
        {
            Log.LogError("File not found: " + RuntimeConfigFile);
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Target to invoke the task after build -->
  <Target Name="UpdateRuntimeConfig" AfterTargets="Build">
    <PropertyGroup>
      <RuntimeConfigFile>$(TargetDir)$(AssemblyName).runtimeconfig.json</RuntimeConfigFile>
      <DotNet_8_0_OrGreater>false</DotNet_8_0_OrGreater>
      <DotNet_8_0_OrGreater Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' And ($(TargetFramework.StartsWith('net8.')) Or $(TargetFramework.StartsWith('net9.')) Or ($(TargetFramework.StartsWith('net')) And $(TargetFramework.IndexOf('.')) > 4))">true</DotNet_8_0_OrGreater>
    </PropertyGroup>

    <!-- Example usage -->
    <UpdateRuntimeConfigProperty 
        RuntimeConfigFile="$(RuntimeConfigFile)" 
        PropertyName="System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization" 
        PropertyValue="true" 
        Condition="Exists('$(RuntimeConfigFile)') And '$(DotNet_8_0_OrGreater)' == 'true'" />
  </Target>
  
</Project>